{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/StoreRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nexport default function StoreRegistration() {\n  const [name, setName] = useState(\"\");\n  const [measurement, setMeasurement] = useState(\"\");\n  const [quantity, setQuantity] = useState(0);\n  const {\n    register,\n    errors,\n    handleSubmit,\n    getValues\n  } = useForm();\n  const [data, setData] = useState({});\n\n  async function fetchProduct() {\n    const response = await fetch(\"http://127.0.0.1:8000/list-of-vehicle/\");\n    const res = await response.json();\n    setData(res);\n  }\n\n  useEffect(() => {\n    fetchProduct();\n    checkVehicle();\n  }, [vehiclename]); // below function is used to check typed vehicle name is already in database or not\n\n  function checkVehicle() {\n    try {\n      const showList = (item, index) => {\n        if (vehiclename === item.name) {\n          alert(\"already exists, please enter different vehicle name\");\n        }\n      };\n\n      data.forEach(showList);\n    } catch (err) {}\n  }\n\n  const onSubmit = data => {\n    alert(\"store registered successfully \" + name);\n    axios.post(`http://127.0.0.1:8000/store-registration/`, {\n      name: name,\n      measurement: measurement,\n      quantity: quantity\n    }).then(res => {\n      console.log(res);\n      console.log(res.data);\n    });\n    window.location.reload(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Store Registration\")), React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    onChange: e => setName(e.target.value),\n    placeholder: \"Enter Store Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"measurement\",\n    ref: register({\n      required: true,\n      maxLength: 30 // minLength: { value: 5, message: \"Min length is 5\" }\n\n    }),\n    onChange: e => setMeasurement(e.target.value),\n    placeholder: \"Enter Measurement\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    pattern: \"[0-9]*\",\n    name: \"quantity\",\n    ref: register({\n      required: true,\n      maxLength: 30 // minLength: { value: 5, message: \"Min length is 5\" }\n\n    }),\n    onChange: e => setQuantity(e.target.value),\n    placeholder: \"Enter Quantity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/StoreRegistration.js"],"names":["React","useState","useEffect","axios","useForm","StoreRegistration","name","setName","measurement","setMeasurement","quantity","setQuantity","register","errors","handleSubmit","getValues","data","setData","fetchProduct","response","fetch","res","json","checkVehicle","vehiclename","showList","item","index","alert","forEach","err","onSubmit","post","then","console","log","window","location","reload","required","maxLength","minLength","value","message","e","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function StoreRegistration() {\n  const [name, setName] = useState(\"\");\n  const [measurement, setMeasurement] = useState(\"\");\n  const [quantity, setQuantity] = useState(0);\n\n  const { register, errors, handleSubmit, getValues } = useForm();\n\n  const [data, setData] = useState({});\n\n  async function fetchProduct() {\n    const response = await fetch(\"http://127.0.0.1:8000/list-of-vehicle/\");\n\n    const res = await response.json();\n    setData(res);\n  }\n\n  useEffect(() => {\n    fetchProduct();\n    checkVehicle();\n  }, [vehiclename]);\n\n  // below function is used to check typed vehicle name is already in database or not\n  function checkVehicle() {\n    try {\n      const showList = (item, index) => {\n        if (vehiclename === item.name) {\n          alert(\"already exists, please enter different vehicle name\");\n        }\n      };\n      data.forEach(showList);\n    } catch (err) {}\n  }\n  const onSubmit = data => {\n    alert(\"store registered successfully \" + name);\n    axios\n      .post(`http://127.0.0.1:8000/store-registration/`, {\n        name: name,\n        measurement: measurement,\n        quantity: quantity\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      });\n    window.location.reload(false);\n  };\n\n  return (\n    <div>\n      <center>\n        <h2>Store Registration</h2>\n      </center>\n      <div className=\"\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div>\n            <input\n              type=\"text\"\n              name=\"name\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => setName(e.target.value)}\n              placeholder=\"Enter Store Name\"\n            />\n            <input\n              type=\"text\"\n              name=\"measurement\"\n              ref={register({\n                required: true,\n                maxLength: 30\n                // minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => setMeasurement(e.target.value)}\n              placeholder=\"Enter Measurement\"\n            />\n            <input\n              type=\"text\"\n              pattern=\"[0-9]*\"\n              name=\"quantity\"\n              ref={register({\n                required: true,\n                maxLength: 30\n                // minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => setQuantity(e.target.value)}\n              placeholder=\"Enter Quantity\"\n            />\n            {/* <div style={{ color: \"red\" }}>\n              {Object.keys(errors).length > 0 && errors.password.message}\n            </div> */}\n          </div>\n\n          <input type=\"submit\" />\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}