{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nimport InputCommonName from \"../modular/InputCommonName\";\nexport default class MachinePartyRegistration extends React.Component {\n  // Check existence of party name\n  //Form Handler\n  // toggle load status\n  constructor(props) {\n    super(props);\n\n    this.fetchProduct = async () => {\n      try {\n        const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n        const jsonMachineList = await responseMachineList.json();\n        this.state.partyList = jsonMachineList;\n      } catch {\n        this.toggleLoadStatus();\n      }\n    };\n\n    this.checkParty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage,\n        crasher: this.state.crasher\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {//console.log(error.response.request._response);\n      });\n      console.log(this.state.partyName);\n      console.log(this.state.partyContact);\n      console.log(this.state.partyVillage);\n      console.log(this.state.crasher);\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.toggleLoadStatus = async () => {\n      if (this.state.loadingStatus.visibility === \"visible\") {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"hidden\"\n          },\n          loadedStatus: {\n            visibility: \"visible\"\n          }\n        });\n      } else {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"visible\"\n          },\n          loadedStatus: {\n            visibility: \"hidden\"\n          }\n        });\n      }\n    };\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      crasher: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkParty = this.checkParty.bind(this); // this.checkVillage = this.checkVillage.bind(this);\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(InputPartyNameField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyName = dataFromChild;\n        this.checkParty();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(InputContactField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyContact = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(InputPartyVillageField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyVillage = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(InputCommonName, {\n      minLengthh: 5,\n      placeholderParent: \"Crasher\",\n      callbackFromParent: dataFromChild => {\n        this.state.crasher = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","InputPartyNameField","InputContactField","InputPartyVillageField","InputCommonName","MachinePartyRegistration","Component","constructor","props","fetchProduct","responseMachineList","fetch","jsonMachineList","json","state","partyList","toggleLoadStatus","checkParty","setState","partyExistMessage","responseMessage","buttonStatus","visibility","showList","item","index","partyName","toLowerCase","name","forEach","err","onSubmit","e","post","contact","partyContact","village","partyVillage","crasher","then","res","data","catch","error","console","log","target","reset","preventDefault","loadingStatus","loadedStatus","bind","componentDidMount","render","dataFromChild"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nimport InputCommonName from \"../modular/InputCommonName\";\n\nexport default class MachinePartyRegistration extends React.Component {\n  fetchProduct = async () => {\n    try {\n      const responseMachineList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machineparty/\"\n      );\n      const jsonMachineList = await responseMachineList.json();\n      this.state.partyList = jsonMachineList;\n    } catch {\n      this.toggleLoadStatus();\n    }\n  };\n  // Check existence of party name\n  checkParty = () => {\n    try {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n      const showList = (item, index) => {\n        if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n          this.setState({\n            partyExistMessage: \"* This party name is already exist!!!\",\n            buttonStatus: {\n              visibility: \"hidden\"\n            }\n          });\n        } else {\n        }\n      };\n\n      this.state.partyList.forEach(showList);\n    } catch (err) {}\n  };\n\n  //Form Handler\n  onSubmit = e => {\n    axios\n      .post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage,\n        crasher: this.state.crasher\n      })\n      .then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      })\n      .catch(error => {\n        //console.log(error.response.request._response);\n      });\nconsole.log(this.state.partyName);\nconsole.log(this.state.partyContact);\nconsole.log(this.state.partyVillage);\nconsole.log(this.state.crasher);\n\n    e.target.reset();\n    e.preventDefault();\n  };\n\n  // toggle load status\n  toggleLoadStatus = async () => {\n    if (this.state.loadingStatus.visibility === \"visible\") {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"hidden\"\n        },\n        loadedStatus: {\n          visibility: \"visible\"\n        }\n      });\n    } else {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"visible\"\n        },\n        loadedStatus: {\n          visibility: \"hidden\"\n        }\n      });\n    }\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      crasher: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n   // this.checkVillage = this.checkVillage.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          <InputPartyNameField\n            callbackFromParent={dataFromChild => {\n              this.state.partyName = dataFromChild;\n              this.checkParty();\n            }}\n          />\n          <p>{this.state.partyExistMessage}</p>\n\n          <br />\n\n          <InputContactField\n            callbackFromParent={dataFromChild => {\n              this.state.partyContact = dataFromChild;\n            }}\n          />\n\n          <br />\n          <br />\n\n          <InputPartyVillageField\n            callbackFromParent={dataFromChild => {\n              this.state.partyVillage = dataFromChild;\n            }}\n          />\n          \n          <InputCommonName\n            minLengthh={5}\n            placeholderParent={\"Crasher\"}\n            callbackFromParent={dataFromChild => {this.state.crasher = dataFromChild;}}\n            \n            \n          />\n        </div>\n\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}