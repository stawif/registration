{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/PartyRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useInput from \"./InputField\";\nimport { useForm } from \"react-hook-form\";\nexport default function PartyRegistration() {\n  const [data, setData] = useState({});\n  const [party, setParty] = useState(\"\");\n  const [name, userName] = useState(\"\");\n  const [contact, userContact] = useState(0);\n  const [address, userAddress] = useState(\"\");\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm();\n  useEffect(() => {\n    async function fetchProduct() {\n      const response = await fetch(\"http://127.0.0.1:8000/list-of-party/\");\n      const res = await response.json();\n      setData(res);\n    }\n\n    fetchProduct();\n    checkName();\n  }, [name]); // below function is used to check typed machine name is already in database or not\n\n  function checkName() {\n    try {\n      const showList = (item, index) => {\n        console.log(\"Name is = \" + item.name);\n\n        if (name === item.name) {\n          alert(\"Chng machine name\");\n        }\n      };\n\n      data.forEach(showList);\n    } catch (err) {\n      console.log(\"Still loading...\");\n    }\n  } // below function is used to submit the machine registration request\n\n\n  function handleClick() {\n    axios.post(\"http://127.0.0.1:8000/party-registration/\", {\n      name: name,\n      contact: contact,\n      village: address,\n      party_type: party\n    }).then(res => {\n      console.log(res);\n      console.log(res.data);\n      setData(res);\n    });\n  }\n\n  console.log(party);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Party Registration\")), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, userName, userContact, userAddress, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"partyName\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    onChange: e => userName(e.target.value),\n    placeholder: \"Enter Party Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"phone\",\n    name: \"contactNumber\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    onChange: e => userContact(e.target.value),\n    placeholder: \"Enter Contact Number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"addressName\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    onChange: e => userAddress(e.target.value),\n    placeholder: \"Enter Address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), [\"Machine_work\", \"Vehicle_work\", \"Daily_work\", \"Purchase_party\"].map((option, i) => {\n    return React.createElement(\"label\", {\n      key: option,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"radio1\",\n      checked: party === option ? true : false,\n      key: i + 100,\n      onChange: () => setParty(option),\n      value: option,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), option);\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Register\"))));\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/PartyRegistration.js"],"names":["React","useState","useEffect","axios","useInput","useForm","PartyRegistration","data","setData","party","setParty","name","userName","contact","userContact","address","userAddress","register","errors","handleSubmit","reset","fetchProduct","response","fetch","res","json","checkName","showList","item","index","console","log","alert","forEach","err","handleClick","post","village","party_type","then","required","maxLength","minLength","value","message","e","target","map","option","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useInput from \"./InputField\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function PartyRegistration() {\n  const [data, setData] = useState({});\n\n  const [party, setParty] = useState(\"\");\n\n  const [name, userName] = useState(\"\");\n  const [contact, userContact] = useState(0);\n  const [address, userAddress] = useState(\"\");\n\n  const { register, errors, handleSubmit, reset } = useForm();\n\n  useEffect(() => {\n    async function fetchProduct() {\n      const response = await fetch(\"http://127.0.0.1:8000/list-of-party/\");\n\n      const res = await response.json();\n      setData(res);\n    }\n\n    fetchProduct();\n    checkName();\n  }, [name]);\n\n  // below function is used to check typed machine name is already in database or not\n  function checkName() {\n    try {\n      const showList = (item, index) => {\n        console.log(\"Name is = \" + item.name);\n        if (name === item.name) {\n          alert(\"Chng machine name\");\n        }\n      };\n      data.forEach(showList);\n    } catch (err) {\n      console.log(\"Still loading...\");\n    }\n  }\n\n  // below function is used to submit the machine registration request\n  function handleClick() {\n    axios\n      .post(\"http://127.0.0.1:8000/party-registration/\", {\n        name: name,\n        contact: contact,\n        village: address,\n        party_type: party\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        setData(res);\n      });\n  }\n\n  console.log(party);\n  return (\n    <div>\n      <center>\n        <h2>Party Registration</h2>\n      </center>\n      <hr />\n      <br />\n      <div className=\"\">\n        <form onSubmit={handleClick}>\n          {userName}\n          {userContact}\n          {userAddress}\n          <input\n              type=\"text\"\n              name=\"partyName\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userName(e.target.value)}\n              placeholder=\"Enter Party Name\"\n            />\n            <input\n              type=\"phone\"\n              name=\"contactNumber\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userContact(e.target.value)}\n              placeholder=\"Enter Contact Number\"\n            />\n            <input\n              type=\"text\"\n              name=\"addressName\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userAddress(e.target.value)}\n              placeholder=\"Enter Address\"\n            />\n          {[\"Machine_work\", \"Vehicle_work\", \"Daily_work\", \"Purchase_party\"].map(\n            (option, i) => {\n              return (\n                <label key={option}>\n                  <input\n                    type=\"radio\"\n                    name=\"radio1\"\n                    checked={party === option ? true : false}\n                    key={i + 100}\n                    onChange={() => setParty(option)}\n                    value={option}\n                    required\n                  />\n                  {option}\n                </label>\n              );\n            }\n          )}\n\n          <button>Register</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}