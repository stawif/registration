{"ast":null,"code":"var _jsxFileName = \"E:\\\\registration\\\\frontend\\\\src\\\\components\\\\registration\\\\MachineRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nexport default class MachineRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      machineName: \"\",\n      machineExistStatus: \"\",\n      machineList: {},\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    }; // Fetch machine list from server\n\n    this.state.fetchProduct = async () => {\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      this.state.machineList = jsonMachineList;\n    };\n\n    this.state.fetchProduct(); // Check existence of machine name\n\n    this.state.checkMachine = () => {\n      try {\n        this.setState({\n          machineExistStatus: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.machineName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              machineExistStatus: \"* This machine name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.machineList.forEach(showList);\n      } catch (err) {}\n\n      console.log(this.state.machineName);\n    };\n\n    this.state.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-registration/\", {\n        name: this.state.machineName\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {//alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Machine Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"machineName\",\n      placeholder: \"Machine Name\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\" //value={this.state.machineName}\n      ,\n      onChange: e => {\n        this.state.machineName = e.target.value; // this.setState({ [e.target.name]: e.target.value });\n        // console.log(e.target.name,\"as\", e.target.value);\n\n        this.state.checkMachine();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.state.machineExistStatus), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["E:/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","axios","MachineRegistration","Component","constructor","props","state","machineName","machineExistStatus","machineList","responseMessage","buttonStatus","visibility","fetchProduct","responseMachineList","fetch","jsonMachineList","json","checkMachine","setState","showList","item","index","toLowerCase","name","forEach","err","console","log","onSubmit","e","post","then","res","data","catch","error","target","reset","preventDefault","render","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class MachineRegistration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      machineName: \"\",\r\n      machineExistStatus: \"\",\r\n      machineList: {},\r\n      responseMessage: \"\",\r\n      buttonStatus: {\r\n        visibility: \"visible\"\r\n      }\r\n    }\r\n  \r\n    \r\n\r\n  // Fetch machine list from server\r\n  this.state.fetchProduct = async () => {\r\n      const responseMachineList = await fetch(\r\n        \"http://127.0.0.1:8000/list-of-machines/\"\r\n      );\r\n      const jsonMachineList = await responseMachineList.json();\r\n      this.state.machineList = jsonMachineList;\r\n    };\r\n    this.state.fetchProduct();\r\n\r\n    // Check existence of machine name\r\n    this.state.checkMachine = () => {\r\n      try {\r\n        this.setState({\r\n          machineExistStatus: \"\",\r\n          responseMessage: \"\",\r\n          buttonStatus: {\r\n            visibility: \"visible\"\r\n          }\r\n        });\r\n        const showList = (item, index) => {\r\n          if (\r\n            this.state.machineName.toLowerCase() === item.name.toLowerCase()\r\n          ) {\r\n            this.setState({\r\n              machineExistStatus: \"* This machine name is already exist!!!\",\r\n              buttonStatus: {\r\n                visibility: \"hidden\"\r\n              }\r\n            });\r\n          } else {\r\n          }\r\n        };\r\n        this.state.machineList.forEach(showList);\r\n      } catch (err) {}\r\n      console.log(this.state.machineName);\r\n      \r\n    };\r\n\r\n    this.state.onSubmit = e => {\r\n      axios\r\n        .post(\"http://127.0.0.1:8000/machine-registration/\", {\r\n          name: this.state.machineName\r\n        })\r\n        .then(res => {\r\n          this.state.fetchProduct();\r\n          this.setState({\r\n            responseMessage: res.data\r\n          });\r\n        })\r\n        .catch(error => {\r\n          //alert(error.response.request._response);\r\n        });\r\n      e.target.reset();\r\n      e.preventDefault();\r\n    };\r\n  }\r\n\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"form-container form-group\"\r\n        onSubmit={e => this.state.onSubmit(e)}\r\n      >\r\n        <p className=\"headingViewPart\">Machine Registration</p>\r\n        <div className=\"pt-5\">\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"mb-2\"\r\n            name=\"machineName\"\r\n            placeholder=\"Machine Name\"\r\n            autoComplete=\"off\"\r\n            maxLength=\"30\"\r\n            minLength=\"5\"\r\n            //value={this.state.machineName}\r\n            onChange=\r\n            {e => {\r\n              this.state.machineName = e.target.value;\r\n              // this.setState({ [e.target.name]: e.target.value });\r\n              // console.log(e.target.name,\"as\", e.target.value);\r\n              \r\n              this.state.checkMachine();\r\n            }}\r\n            \r\n            required\r\n          />\r\n        </div>\r\n        <p>{this.state.machineExistStatus}</p>\r\n        <p>{this.state.responseMessage}</p>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-outline-dark\"\r\n          style={this.state.buttonStatus}\r\n        >\r\n          Save\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}