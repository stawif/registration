{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/entry/AutoSuggestion.js\";\nimport React from 'react';\nimport Autosuggest from \"react-autosuggest\";\nconst languages = [{\n  name: 'C',\n  year: 1972\n}, {\n  name: 'C#',\n  year: 2000\n}, {\n  name: 'C++',\n  year: 1983\n}, {\n  name: 'Clojure',\n  year: 2007\n}, {\n  name: 'Elm',\n  year: 2012\n}, {\n  name: 'Go',\n  year: 2009\n}, {\n  name: 'Haskell',\n  year: 1990\n}, {\n  name: 'Java',\n  year: 1995\n}, {\n  name: 'Javascript',\n  year: 1995\n}, {\n  name: 'Perl',\n  year: 1987\n}, {\n  name: 'PHP',\n  year: 1995\n}, {\n  name: 'Python',\n  year: 1991\n}, {\n  name: 'Ruby',\n  year: 1995\n}, {\n  name: 'Scala',\n  year: 2003\n}]; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('^' + escapedValue, 'i');\n  return languages.filter(language => regex.test(language.name));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, suggestion.name);\n}\n\nexport default class Autosuggestion extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: this.props\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: \"Type 'c'\",\n      value,\n      onChange: this.onChange\n    };\n    return React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/entry/AutoSuggestion.js"],"names":["React","Autosuggest","languages","name","year","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","filter","language","test","getSuggestionValue","suggestion","renderSuggestion","Autosuggestion","Component","constructor","onChange","event","newValue","method","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","props","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from \"react-autosuggest\";\n\nconst languages = [\n    {\n      name: 'C',\n      year: 1972\n    },\n    {\n      name: 'C#',\n      year: 2000\n    },\n    {\n      name: 'C++',\n      year: 1983\n    },\n    {\n      name: 'Clojure',\n      year: 2007\n    },\n    {\n      name: 'Elm',\n      year: 2012\n    },\n    {\n      name: 'Go',\n      year: 2009\n    },\n    {\n      name: 'Haskell',\n      year: 1990\n    },\n    {\n      name: 'Java',\n      year: 1995\n    },\n    {\n      name: 'Javascript',\n      year: 1995\n    },\n    {\n      name: 'Perl',\n      year: 1987\n    },\n    {\n      name: 'PHP',\n      year: 1995\n    },\n    {\n      name: 'Python',\n      year: 1991\n    },\n    {\n      name: 'Ruby',\n      year: 1995\n    },\n    {\n      name: 'Scala',\n      year: 2003\n    }\n  ];\n  \n  // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n  function escapeRegexCharacters(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n  \n  function getSuggestions(value) {\n    const escapedValue = escapeRegexCharacters(value.trim());\n    \n    if (escapedValue === '') {\n      return [];\n    }\n  \n    const regex = new RegExp('^' + escapedValue, 'i');\n  \n    return languages.filter(language => regex.test(language.name));\n  }\n  \n  function getSuggestionValue(suggestion) {\n    return suggestion.name;\n  }\n  \n  function renderSuggestion(suggestion) {\n    return (\n      <span>{suggestion.name}</span>\n    );\n  }\n  \n  export default class Autosuggestion extends React.Component {\n    constructor() {\n      super();\n  \n      this.state = {\n        value: '',\n        suggestions: this.props\n      };    \n    }\n  \n    onChange = (event, { newValue, method }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n    \n    onSuggestionsFetchRequested = ({ value }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n  \n    onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n  \n    render() {\n      const { value, suggestions } = this.state;\n      const inputProps = {\n        placeholder: \"Type 'c'\",\n        value,\n        onChange: this.onChange\n      };\n  \n      return (\n        <Autosuggest \n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps} />\n      );\n    }\n  }\n  \n  \n  "]},"metadata":{},"sourceType":"module"}