{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/PartyRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useInput from \"./InputField\";\nimport { useForm } from \"react-hook-form\";\nexport default function PartyRegistration() {\n  const [data, setData] = useState({});\n  const [party, setParty] = useState(\"\");\n  const [name, userName] = useState(\"\");\n  const [contact, userContact] = useState(0);\n  const [address, userAddress] = useState(\"\");\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm();\n  fetch('http://127.0.0.1:8000/list-of-party/').then(response => response.json()) // one extra step\n  .then(data => {\n    console.log(data);\n  }).catch(error => console.error(error)); // async function fetchProduct() {\n  //   const response = await fetch(\"http://127.0.0.1:8000/list-of-party/\");\n  //   const res = await response.json();\n  //   setData(res);\n  // }\n  // fetchProduct();\n\n  useEffect(() => {\n    checkName();\n  }, [name]); // below function is used to check typed machine name is already in database or not\n\n  function checkName() {\n    try {\n      const showList = (item, index) => {\n        console.log(\"Name is = \" + item.name);\n\n        if (name === item.name) {\n          alert(\"Party name already exists. please change Party name\");\n        }\n      };\n\n      data.forEach(showList);\n    } catch (err) {\n      console.log(\"Still loading...\");\n    }\n  } // below function is used to submit the machine registration request\n\n\n  const onSubmit = (data, e) => {\n    axios.post(\"http://127.0.0.1:8000/party-registration/\", {\n      name: name,\n      contact: contact,\n      village: address,\n      party_type: party\n    }).then(res => {\n      console.log(res);\n      console.log(res.data);\n      setData(res);\n    });\n    alert(\"machine registered successfully\" + name);\n    e.target.reset();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Party Registration\")), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"partyName\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length for Party Name is 5\"\n      }\n    }),\n    onChange: e => userName(e.target.value),\n    placeholder: \"Enter Party Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), errors.partyName && errors.partyName.message, React.createElement(\"input\", {\n    type: \"tel\",\n    name: \"contactNumber\",\n    ref: register({\n      required: true,\n      maxLength: 12,\n      minLength: 10\n    }),\n    onChange: e => userContact(e.target.value),\n    placeholder: \"Enter Contact Number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"addressName\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    onChange: e => userAddress(e.target.value),\n    placeholder: \"Enter Address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), errors.addressName && errors.addressName.message, [\"Machine_work\", \"Vehicle_work\", \"Daily_work\", \"Purchase_party\"].map((option, i) => {\n    return React.createElement(\"label\", {\n      key: option,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"radio1\",\n      checked: party === option ? true : false,\n      key: i + 100,\n      onChange: () => setParty(option),\n      value: option,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), option);\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Register\"))));\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/PartyRegistration.js"],"names":["React","useState","useEffect","axios","useInput","useForm","PartyRegistration","data","setData","party","setParty","name","userName","contact","userContact","address","userAddress","register","errors","handleSubmit","reset","fetch","then","response","json","console","log","catch","error","checkName","showList","item","index","alert","forEach","err","onSubmit","e","post","village","party_type","res","target","required","maxLength","minLength","value","message","partyName","addressName","map","option","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAC1C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACU,IAAD,EAAOC,QAAP,IAAmBX,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACY,OAAD,EAAUC,WAAV,IAAyBb,QAAQ,CAAC,CAAD,CAAvC;AACA,QAAM,CAACc,OAAD,EAAUC,WAAV,IAAyBf,QAAQ,CAAC,EAAD,CAAvC;AAEA,QAAM;AAAEgB,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA;AAAlC,MAA4Cf,OAAO,EAAzD;AAKEgB,EAAAA,KAAK,CAAC,sCAAD,CAAL,CACDC,IADC,CACIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADhB,EACoC;AADpC,GAEDF,IAFC,CAEIf,IAAI,IAAI;AACZkB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAZ;AACD,GAJC,EAKDoB,KALC,CAKKC,KAAK,IAAIH,OAAO,CAACG,KAAR,CAAcA,KAAd,CALd,EAdwC,CAoB1C;AACA;AAEA;AACA;AACA;AAEA;;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,SAAS;AACV,GAFQ,EAEN,CAAClB,IAAD,CAFM,CAAT,CA7B0C,CAiC1C;;AACA,WAASkB,SAAT,GAAqB;AACnB,QAAI;AACF,YAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChCP,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAeK,IAAI,CAACpB,IAAhC;;AACA,YAAIA,IAAI,KAAKoB,IAAI,CAACpB,IAAlB,EAAwB;AACtBsB,UAAAA,KAAK,CAAC,qDAAD,CAAL;AACD;AACF,OALD;;AAMA1B,MAAAA,IAAI,CAAC2B,OAAL,CAAaJ,QAAb;AACD,KARD,CAQE,OAAOK,GAAP,EAAY;AACZV,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AACF,GA9CyC,CAgD1C;;;AAEA,QAAMU,QAAQ,GAAG,CAAC7B,IAAD,EAAO8B,CAAP,KAAa;AAC5BlC,IAAAA,KAAK,CACFmC,IADH,CACQ,2CADR,EACqD;AACjD3B,MAAAA,IAAI,EAAEA,IAD2C;AAEjDE,MAAAA,OAAO,EAAEA,OAFwC;AAGjD0B,MAAAA,OAAO,EAAExB,OAHwC;AAIjDyB,MAAAA,UAAU,EAAE/B;AAJqC,KADrD,EAOGa,IAPH,CAOQmB,GAAG,IAAI;AACXhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAG,CAAClC,IAAhB;AACAC,MAAAA,OAAO,CAACiC,GAAD,CAAP;AACD,KAXH;AAaAR,IAAAA,KAAK,CAAC,oCAAoCtB,IAArC,CAAL;AACA0B,IAAAA,CAAC,CAACK,MAAF,CAAStB,KAAT;AACD,GAhBD;;AAkBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,QAAQ,EAAED,YAAY,CAACiB,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,GAAG,EAAEnB,QAAQ,CAAC;AACZ0B,MAAAA,QAAQ,EAAE,IADE;AAEZC,MAAAA,SAAS,EAAE,EAFC;AAGZC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,OAAO,EAAE;AAArB;AAHC,KAAD,CAHf;AAQE,IAAA,QAAQ,EAAEV,CAAC,IAAIzB,QAAQ,CAACyB,CAAC,CAACK,MAAF,CAASI,KAAV,CARzB;AASE,IAAA,WAAW,EAAC,kBATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYG5B,MAAM,CAAC8B,SAAP,IAAoB9B,MAAM,CAAC8B,SAAP,CAAiBD,OAZxC,EAaE;AACE,IAAA,IAAI,EAAC,KADP;AAEE,IAAA,IAAI,EAAC,eAFP;AAGE,IAAA,GAAG,EAAE9B,QAAQ,CAAC;AAAE0B,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,SAAS,EAAE,EAA7B;AAAiCC,MAAAA,SAAS,EAAE;AAA5C,KAAD,CAHf;AAIE,IAAA,QAAQ,EAAER,CAAC,IAAIvB,WAAW,CAACuB,CAAC,CAACK,MAAF,CAASI,KAAV,CAJ5B;AAKE,IAAA,WAAW,EAAC,sBALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAqBE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,IAAA,GAAG,EAAE7B,QAAQ,CAAC;AACZ0B,MAAAA,QAAQ,EAAE,IADE;AAEZC,MAAAA,SAAS,EAAE,EAFC;AAGZC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,OAAO,EAAE;AAArB;AAHC,KAAD,CAHf;AAQE,IAAA,QAAQ,EAAEV,CAAC,IAAIrB,WAAW,CAACqB,CAAC,CAACK,MAAF,CAASI,KAAV,CAR5B;AASE,IAAA,WAAW,EAAC,eATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,EAgCG5B,MAAM,CAAC+B,WAAP,IAAsB/B,MAAM,CAAC+B,WAAP,CAAmBF,OAhC5C,EAiCG,CAAC,cAAD,EAAiB,cAAjB,EAAiC,YAAjC,EAA+C,gBAA/C,EAAiEG,GAAjE,CACC,CAACC,MAAD,EAASC,CAAT,KAAe;AACb,WACE;AAAO,MAAA,GAAG,EAAED,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,OAAO,EAAE1C,KAAK,KAAK0C,MAAV,GAAmB,IAAnB,GAA0B,KAHrC;AAIE,MAAA,GAAG,EAAEC,CAAC,GAAG,GAJX;AAKE,MAAA,QAAQ,EAAE,MAAM1C,QAAQ,CAACyC,MAAD,CAL1B;AAME,MAAA,KAAK,EAAEA,MANT;AAOE,MAAA,QAAQ,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAUGA,MAVH,CADF;AAcD,GAhBF,CAjCH,EAoDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApDF,CADF,CANF,CADF;AAiED","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useInput from \"./InputField\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function PartyRegistration() {\n  const [data, setData] = useState({});\n\n  const [party, setParty] = useState(\"\");\n\n  const [name, userName] = useState(\"\");\n  const [contact, userContact] = useState(0);\n  const [address, userAddress] = useState(\"\");\n\n  const { register, errors, handleSubmit, reset } = useForm();\n\n  \n    \n\n    fetch('http://127.0.0.1:8000/list-of-party/')\n  .then(response => response.json())    // one extra step\n  .then(data => {\n    console.log(data) \n  })\n  .catch(error => console.error(error));\n  // async function fetchProduct() {\n  //   const response = await fetch(\"http://127.0.0.1:8000/list-of-party/\");\n\n  //   const res = await response.json();\n  //   setData(res);\n  // }\n\n  // fetchProduct();\n\n  useEffect(() => {\n    checkName();\n  }, [name]);\n\n  // below function is used to check typed machine name is already in database or not\n  function checkName() {\n    try {\n      const showList = (item, index) => {\n        console.log(\"Name is = \" + item.name);\n        if (name === item.name) {\n          alert(\"Party name already exists. please change Party name\");\n        }\n      };\n      data.forEach(showList);\n    } catch (err) {\n      console.log(\"Still loading...\");\n    }\n  }\n\n  // below function is used to submit the machine registration request\n\n  const onSubmit = (data, e) => {\n    axios\n      .post(\"http://127.0.0.1:8000/party-registration/\", {\n        name: name,\n        contact: contact,\n        village: address,\n        party_type: party\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        setData(res);\n      });\n\n    alert(\"machine registered successfully\" + name);\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <center>\n        <h2>Party Registration</h2>\n      </center>\n      <hr />\n      <br />\n      <div className=\"\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n            type=\"text\"\n            name=\"partyName\"\n            ref={register({\n              required: true,\n              maxLength: 30,\n              minLength: { value: 5, message: \"Min length for Party Name is 5\" }\n            })}\n            onChange={e => userName(e.target.value)}\n            placeholder=\"Enter Party Name\"\n          />\n          {errors.partyName && errors.partyName.message}\n          <input\n            type=\"tel\"\n            name=\"contactNumber\"\n            ref={register({ required: true, maxLength: 12, minLength: 10 })}\n            onChange={e => userContact(e.target.value)}\n            placeholder=\"Enter Contact Number\"\n          />\n\n          <input\n            type=\"text\"\n            name=\"addressName\"\n            ref={register({\n              required: true,\n              maxLength: 30,\n              minLength: { value: 5, message: \"Min length is 5\" }\n            })}\n            onChange={e => userAddress(e.target.value)}\n            placeholder=\"Enter Address\"\n          />\n          {errors.addressName && errors.addressName.message}\n          {[\"Machine_work\", \"Vehicle_work\", \"Daily_work\", \"Purchase_party\"].map(\n            (option, i) => {\n              return (\n                <label key={option}>\n                  <input\n                    type=\"radio\"\n                    name=\"radio1\"\n                    checked={party === option ? true : false}\n                    key={i + 100}\n                    onChange={() => setParty(option)}\n                    value={option}\n                    required\n                  />\n                  {option}\n                </label>\n              );\n            }\n          )}\n\n          <button>Register</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}