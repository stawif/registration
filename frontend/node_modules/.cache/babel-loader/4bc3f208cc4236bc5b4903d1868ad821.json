{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      disabled: true\n    }; // Fetch party list and contact list from server\n\n    this.state.fetchProduct = async () => {\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n      const responseContactList = await fetch(\"http://127.0.0.1:8000/list-of-partycontacts/\");\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n      console.log(this.state.partyContacts);\n    };\n\n    this.state.fetchProduct(); // Take name and village from contact\n\n    this.state.getNameVillage = matchContact => {\n      console.log(matchContact);\n      axios.post(\"http://127.0.0.1:8000/party-through-contact/\", {\n        contact: matchContact\n      }).then(res => {\n        const jsonNameVillage = JSON.parse(res.data);\n        this.setState({\n          //disabled: !this.state.disabled,\n          partyName: jsonNameVillage.name,\n          partyVillage: jsonNameVillage.village\n        }); // this.state.partyName = jsonNameVillage.name;\n        // this.state.partyVillage = jsonNameVillage.village;\n\n        console.log(\"Name \", this.state.partyName);\n        console.log(\"Village \", this.state.partyVillage);\n      }).catch(error => {//console.log( error.response.request._response )\n      });\n    };\n\n    this.state.checkVillage = () => {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n    }; // Check existence of party name\n\n\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    }; //Form Handler\n\n\n    this.state.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      console.log(\"Name \", this.state.partyContact);\n      console.log(\"Name \", this.state.partyName);\n      console.log(\"Village \", this.state.partyVillage);\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      pattern: \"^\\\\d{10}$\",\n      name: \"partyContact\",\n      placeholder: \"Party Contact\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.partyContact = e.target.value;\n        this.state.responseMessage = \"\";\n\n        if (e.target.value.length === 10) {\n          if (this.state.partyContacts.indexOf(e.target.value) > -1) {\n            this.state.getNameVillage(e.target.value);\n          } else this.setState({\n            disabled: !this.state.disabled,\n            partyName: \"\",\n            partyVillage: \"\"\n          });\n        }\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyName\",\n      placeholder: \"Party Name\",\n      value: this.state.partyName,\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyName = e.target.value;\n        this.state.checkparty();\n      },\n      required: true,\n      disabled: this.state.disabled ? \"disabled\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyVillage\",\n      placeholder: \"Party Village\",\n      value: this.state.partyVillage,\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyVillage = e.target.value;\n        this.state.checkVillage();\n      },\n      required: true,\n      disabled: this.state.disabled ? \"disabled\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","InputPartyNameField","InputContactField","InputPartyVillageField","MachinePartyRegistration","Component","constructor","props","state","partyName","partyContact","partyVillage","partyList","partyExistMessage","responseMessage","partyContacts","buttonStatus","visibility","disabled","fetchProduct","responsePartyList","fetch","jsonPartyList","json","responseContactList","jsonContactList","console","log","getNameVillage","matchContact","post","contact","then","res","jsonNameVillage","JSON","parse","data","setState","name","village","catch","error","checkVillage","checkparty","showList","item","index","toLowerCase","forEach","err","onSubmit","e","alert","response","request","_response","target","reset","preventDefault","render","value","length","indexOf"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      disabled: true\n    };\n\n    // Fetch party list and contact list from server\n    this.state.fetchProduct = async () => {\n      const responsePartyList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machineparty/\"\n      );\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n      const responseContactList = await fetch(\n        \"http://127.0.0.1:8000/list-of-partycontacts/\"\n      );\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n      console.log(this.state.partyContacts);\n    };\n\n    this.state.fetchProduct();\n\n    // Take name and village from contact\n    this.state.getNameVillage = matchContact => {\n      console.log(matchContact);\n\n      axios\n        .post(\"http://127.0.0.1:8000/party-through-contact/\", {\n          contact: matchContact\n        })\n        .then(res => {\n          const jsonNameVillage = JSON.parse(res.data);\n\n          this.setState({\n            //disabled: !this.state.disabled,\n\n            partyName: jsonNameVillage.name,\n            partyVillage: jsonNameVillage.village\n          });\n          // this.state.partyName = jsonNameVillage.name;\n          // this.state.partyVillage = jsonNameVillage.village;\n          console.log(\"Name \", this.state.partyName);\n          console.log(\"Village \", this.state.partyVillage);\n        })\n        .catch(error => {\n          //console.log( error.response.request._response )\n        });\n    };\n\n    this.state.checkVillage = () => {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n    }\n    // Check existence of party name\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {\n          }\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    //Form Handler\n    this.state.onSubmit = e => {\n      axios\n        .post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n          name: this.state.partyName,\n          contact: this.state.partyContact,\n          village: this.state.partyVillage\n        })\n        .then(res => {\n          this.state.fetchProduct();\n          this.setState({\n            responseMessage: res.data\n          });\n        })\n        .catch(error => {\n          alert(error.response.request._response);\n        });\n      console.log(\"Name \", this.state.partyContact);\n      console.log(\"Name \", this.state.partyName);\n      console.log(\"Village \", this.state.partyVillage);\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.state.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          {/* <InputPartyNameField\n            callbackFromParent={dataFromChild => {\n              this.state.partyName = dataFromChild;\n            }}\n            checkFromParent={this.state.checkparty}\n          /> */}\n\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            pattern=\"^\\d{10}$\"\n            name=\"partyContact\"\n            placeholder=\"Party Contact\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.partyContact = e.target.value;\n              this.state.responseMessage =\"\";\n              if (e.target.value.length === 10) {\n                if (this.state.partyContacts.indexOf(e.target.value) > -1) {\n                  this.state.getNameVillage(e.target.value);\n                } else\n                  this.setState({\n                    \n                    disabled: !this.state.disabled,\n                    partyName: \"\",\n                    partyVillage: \"\"\n                  });\n              }\n            }}\n            required\n          />\n\n          {/* <InputContactField\n            callbackFromParent={dataFromChild => {\n              this.state.partyContact = dataFromChild;\n            }}\n          /> */}\n\n          <br />\n          <br />\n\n          {/* <InputPartyVillageField\n            callbackFromParent={dataFromChild => {\n              this.state.partyVillage = dataFromChild;\n            }}\n          /> */}\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyName\"\n            placeholder=\"Party Name\"\n            value={this.state.partyName}\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyName = e.target.value;\n              this.state.checkparty();\n            }}\n            required\n            disabled={this.state.disabled ? \"disabled\" : \"\"}\n          />\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyVillage\"\n            placeholder=\"Party Village\"\n            value={this.state.partyVillage}\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyVillage = e.target.value;\n              this.state.checkVillage();\n            }}\n            required\n            disabled={this.state.disabled ? \"disabled\" : \"\"}\n          />\n        </div>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}