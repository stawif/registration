{"ast":null,"code":"var _jsxFileName = \"/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nconst MachineRegistration = React.memo(() => {\n  const [machineList, setMachineList] = useState({});\n  const [machineName, userInput] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () => {\n    console.log(\"Fetch calls\");\n    const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n    const jsonMachineList = await responseMachineList.json();\n    setMachineList(jsonMachineList);\n  };\n\n  fetchProduct(); // below function is used to check typed machine name is already in database or not\n\n  function checkMachine() {\n    try {\n      //errors.firstName.message();\n      setErrorMessage(\"\");\n\n      const showList = (item, index) => {\n        if (machineName === item.name) {\n          setErrorMessage(\"* This machine name is already exist!!!\");\n        } else {}\n      };\n\n      machineList.forEach(showList);\n    } catch (err) {}\n  }\n\n  useEffect(() => {\n    checkMachine();\n  }, [machineList]);\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm();\n\n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\" + machineName);\n    axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n      name: machineName\n    }).then(res => {\n      console.log(res);\n      console.log(res.data);\n      setMachineList(res);\n    });\n    e.target.reset();\n  };\n\n  console.log(errors);\n  return React.createElement(\"form\", {\n    className: \"form-container form-group\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"headingViewPart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Machine Registration\"), React.createElement(\"div\", {\n    className: \"pt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"mb-2\",\n    name: \"machineName\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    placeholder: \"Machine Name\",\n    onChange: e => userInput(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), errorMessage, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-outline-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Save\"));\n});\nexport default MachineRegistration;\n/*\n      <center>\n        <h2>Machine Registration</h2>\n      </center>\n      \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n              type=\"text\"\n              name=\"machineName\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userInput(e.target.value)}\n              placeholder=\"Enter Machine Name\"/>\n\n            <br/>\n            <p>{errorMessage}</p>\n\n          <input type=\"submit\" />\n        </form>\n*/","map":{"version":3,"sources":["/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","useState","useEffect","axios","useForm","MachineRegistration","memo","machineList","setMachineList","machineName","userInput","errorMessage","setErrorMessage","fetchProduct","console","log","responseMachineList","fetch","jsonMachineList","json","checkMachine","showList","item","index","name","forEach","err","register","errors","handleSubmit","reset","onSubmit","data","e","alert","post","then","res","target","required","maxLength","minLength","value","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\n\nconst MachineRegistration = React.memo( \n() => {\n  const [machineList, setMachineList] = useState({});\n  const [machineName, userInput] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () =>{\n    console.log(\"Fetch calls\");\n    const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n    const jsonMachineList = await responseMachineList.json();\n    setMachineList(jsonMachineList);\n  }\n\n  fetchProduct(); \n\n  // below function is used to check typed machine name is already in database or not\n  function checkMachine() {\n    try {\n      //errors.firstName.message();\n      setErrorMessage(\"\");\n      const showList = (item, index) => {\n        if (machineName === item.name) {\n          setErrorMessage(\"* This machine name is already exist!!!\");\n        }\n        else{}\n      };\n      machineList.forEach(showList);\n    } \n    catch (err) {}\n  }\n\n\n  useEffect(\n    () => {\n      checkMachine();\n    },\n    [machineList]\n  );\n  \n  const { register, errors, handleSubmit, reset } = useForm();\n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\"+machineName);\n    axios\n      .post(`http://127.0.0.1:8000/machine-registration/`, {\n        name: machineName\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        setMachineList(res);\n      });\n    e.target.reset();\n  };\n  console.log(errors);\n\n  return (\n\t\t\t\t\t\t\t<form className=\"form-container form-group\" onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t\t\t<p className=\"headingViewPart\">Machine Registration</p>\n\t\t\t\t\t\t\t<div className=\"pt-5\">\n                <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => userInput(e.target.value)} \n                    />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<br/>\n              { errorMessage }\n              <br/>\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-outline-dark\">Save</button>\n\t\t\t\t\t\t\t</form>      \n  );\n }\n);\n\nexport default MachineRegistration;\n/*\n      <center>\n        <h2>Machine Registration</h2>\n      </center>\n      \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n              type=\"text\"\n              name=\"machineName\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userInput(e.target.value)}\n              placeholder=\"Enter Machine Name\"/>\n\n            <br/>\n            <p>{errorMessage}</p>\n\n          <input type=\"submit\" />\n        </form>\n*/"]},"metadata":{},"sourceType":"module"}