{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Autocomplete from \"./AutoComplete.jsx\"; // const partyNamesFromApi = [];\n// const machineNamesFromApi = [];\n// fetch(\"http://127.0.0.1:8000/list-of-machineparty/\")\n//   .then(res => res.json())\n//   .then(out => {\n//     partyListFunction(out);\n//   })\n//   .catch(err => {\n//     throw err;\n//   });\n// fetch(\"http://127.0.0.1:8000/list-of-machines/\")\n//   .then(res => res.json())\n//   .then(out => {\n//     machineListFunction(out);\n//   })\n//   .catch(err => {\n//     throw err;\n//   });\n// //below function is used to store api data in a array\n// function partyListFunction(data) {\n//   data.map(item => partyNamesFromApi.push(item.name));\n// }\n// function machineListFunction(data) {\n//   data.map(item => machineNamesFromApi.push(item.name));\n// }\n\nexport default class MachineWorkEntry extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.myCallbackForSelectedParty = dataFromChild => {\n      this.state.selectedParty = dataFromChild;\n    };\n\n    this.myCallbackForSelectedMachine = dataFromChild => {\n      this.state.selectedMachine = dataFromChild;\n    };\n\n    this.state = {\n      partyNamesFromApi: [],\n      machineNamesFromApi: [],\n      date: null,\n      selectedMachine: \"\",\n      selectedParty: \"\",\n      remark: \"\",\n      dieselAmount: 0,\n      drillingFeet: 0,\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      radioButtonStyle: {\n        float: \"left\"\n      }\n    };\n\n    this.state.fetchProduct = async () => {\n      fetch(\"http://127.0.0.1:8000/list-of-machineparty/\").then(res => res.json()).then(out => {\n        out.map(item => this.state.partyNamesFromApi.append(item));\n      }).catch(err => {\n        throw err;\n      });\n      fetch(\"http://127.0.0.1:8000/list-of-machines/\").then(res => res.json()).then(out => {\n        out.map(item => this.state.machineNamesFromApi.push(item.name));\n      }).catch(err => {\n        throw err;\n      });\n    };\n\n    console.log(this.state.machineNamesFromApi);\n    console.log(this.state.partyNamesFromApi);\n    this.state.fetchProduct(); // Check existence of party name\n\n    this.state.checkparty = dataFromChild => {\n      try {\n        this.setState({\n          buttonStatus: {\n            visibility: \"hidden\"\n          }\n        });\n\n        const showList = item => {\n          if (dataFromChild.toLowerCase() === item.toLowerCase()) {\n            this.setState({\n              buttonStatus: {\n                visibility: \"visible\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyNamesFromApi.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.checkmachine = dataFromChild => {\n      try {\n        this.setState({\n          buttonStatus: {\n            visibility: \"hidden\"\n          }\n        });\n\n        const showList = item => {\n          if (dataFromChild.toLowerCase() === item.toLowerCase()) {\n            this.setState({\n              buttonStatus: {\n                visibility: \"visible\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.machineNamesFromApi.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/enter-machineparty-work/\", {\n        party: this.state.selectedParty,\n        machine: this.state.selectedMachine,\n        date: this.state.date,\n        drilling_feet: this.state.drillingFeet,\n        diesel_amount: this.state.dieselAmount,\n        remark: this.state.remark\n      }).then(res => {\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      console.log(this.state.selectedParty);\n      console.log(this.state.selectedMachine);\n      console.log(this.state.date);\n      console.log(this.state.drillingFeet);\n      console.log(this.state.dieselAmount);\n      console.log(this.state.remark);\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.state.getDate = () => {\n      var curr = new Date();\n      curr.setDate(curr.getDate());\n      var date = curr.toISOString().substr(0, 10);\n      this.state.date = date;\n    };\n\n    this.state.getDate();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Machine Work Entry\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      suggestions: this.state.partyNamesFromApi,\n      callbackFromParent: this.myCallbackForSelectedParty,\n      checkFromParent: this.state.checkparty,\n      placeholderfrom: \"Party name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      suggestions: this.state.machineNamesFromApi,\n      callbackFromParent: this.myCallbackForSelectedMachine,\n      placeholderfrom: \"Machine name\",\n      checkFromParent: this.state.checkmachine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"date\" //data-date=\"\"\n      ,\n      \"data-date-format\": \"YYYY-MM-DD\",\n      defaultValue: this.state.date,\n      name: \"date\",\n      onChange: e => {\n        this.state.date = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"remark\",\n      placeholder: \"Remark\",\n      autoComplete: \"off\",\n      maxLength: \"30\" //minLength=\"5\"\n      ,\n      onChange: e => {\n        this.state.remark = e.target.value;\n      } //required\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"dieselAmount\",\n      placeholder: \"Diesel Amount\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.dieselAmount = parseInt(e.target.value);\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"drillingFeet\",\n      placeholder: \"Drilling Feet\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.drillingFeet = parseInt(e.target.value);\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js"],"names":["React","axios","Autocomplete","MachineWorkEntry","Component","constructor","props","myCallbackForSelectedParty","dataFromChild","state","selectedParty","myCallbackForSelectedMachine","selectedMachine","partyNamesFromApi","machineNamesFromApi","date","remark","dieselAmount","drillingFeet","responseMessage","buttonStatus","visibility","radioButtonStyle","float","fetchProduct","fetch","then","res","json","out","map","item","append","catch","err","push","name","console","log","checkparty","setState","showList","toLowerCase","forEach","checkmachine","onSubmit","e","post","party","machine","drilling_feet","diesel_amount","data","error","alert","response","request","_response","target","reset","preventDefault","getDate","curr","Date","setDate","toISOString","substr","render","partyExistMessage","value","parseInt"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Autocomplete from \"./AutoComplete.jsx\";\n\n// const partyNamesFromApi = [];\n// const machineNamesFromApi = [];\n\n// fetch(\"http://127.0.0.1:8000/list-of-machineparty/\")\n//   .then(res => res.json())\n//   .then(out => {\n//     partyListFunction(out);\n//   })\n//   .catch(err => {\n//     throw err;\n//   });\n\n// fetch(\"http://127.0.0.1:8000/list-of-machines/\")\n//   .then(res => res.json())\n//   .then(out => {\n//     machineListFunction(out);\n//   })\n//   .catch(err => {\n//     throw err;\n//   });\n// //below function is used to store api data in a array\n// function partyListFunction(data) {\n//   data.map(item => partyNamesFromApi.push(item.name));\n// }\n// function machineListFunction(data) {\n//   data.map(item => machineNamesFromApi.push(item.name));\n// }\n\nexport default class MachineWorkEntry extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyNamesFromApi : [],\n      machineNamesFromApi : [],\n\n      date: null,\n      selectedMachine: \"\",\n      selectedParty: \"\",\n      remark: \"\",\n      dieselAmount: 0,\n      drillingFeet: 0,\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      radioButtonStyle: {\n        float: \"left\"\n      }\n    };\n\n\n    this.state.fetchProduct = async() =>{\n      fetch(\"http://127.0.0.1:8000/list-of-machineparty/\")\n      .then(res => res.json())\n      .then(out => {\n        \n        out.map(item => this.state.partyNamesFromApi.append(item) )\n      })\n      .catch(err => {\n        throw err;\n      });\n    \n    fetch(\"http://127.0.0.1:8000/list-of-machines/\")\n      .then(res => res.json())\n      .then(out => {\n        \n        out.map(item => this.state.machineNamesFromApi.push(item.name));\n      })\n      .catch(err => {\n        throw err;\n      });\n\n\n    }\n\n    console.log(this.state.machineNamesFromApi);\n    console.log(this.state.partyNamesFromApi);\n    this.state.fetchProduct();\n    // Check existence of party name\n    this.state.checkparty = dataFromChild => {\n      try {\n        this.setState({\n          buttonStatus: {\n            visibility: \"hidden\"\n          }\n        });\n        const showList = (item) => {\n          if (dataFromChild.toLowerCase() === item.toLowerCase()) {\n            this.setState({\n              buttonStatus: {\n                visibility: \"visible\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.partyNamesFromApi.forEach(showList);\n      } \n      catch (err) {}\n    };\n\n    this.state.checkmachine = dataFromChild => {\n      try {\n        this.setState({\n          buttonStatus: {\n            visibility: \"hidden\"\n          }\n        });\n        const showList = (item) => {\n          if (dataFromChild.toLowerCase() === item.toLowerCase()) {\n            this.setState({\n              buttonStatus: {\n                visibility: \"visible\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.machineNamesFromApi.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n          axios.post(\"http://127.0.0.1:8000/enter-machineparty-work/\", {\n             party: this.state.selectedParty,\n             machine: this.state.selectedMachine,\n             date: this.state.date,\n             drilling_feet: this.state.drillingFeet,\n             diesel_amount: this.state.dieselAmount,\n             remark: this.state.remark          \n            })\n           .then(res => {\n             this.setState({\n               responseMessage: res.data\n             });\n           })\n           .catch(error => {\n             alert(error.response.request._response);\n           });\n           console.log(this.state.selectedParty);\n           console.log(this.state.selectedMachine);\n           console.log(this.state.date);\n           console.log(this.state.drillingFeet);\n           console.log(this.state.dieselAmount);\n           console.log(this.state.remark);\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.state.getDate = () => {\n      var curr = new Date();\n      curr.setDate(curr.getDate());\n      var date = curr.toISOString().substr(0, 10);\n      this.state.date = date;\n    };\n\n    this.state.getDate();\n  }\n\n  myCallbackForSelectedParty = dataFromChild => {\n    this.state.selectedParty = dataFromChild;\n  };\n  myCallbackForSelectedMachine = dataFromChild => {\n    this.state.selectedMachine = dataFromChild;\n  };\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.state.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Work Entry</p>\n        <div className=\"pt-5\">\n          <Autocomplete\n            suggestions={this.state.partyNamesFromApi}\n            callbackFromParent={this.myCallbackForSelectedParty}\n            checkFromParent={this.state.checkparty}\n            placeholderfrom={\"Party name\"}\n          />\n\n          <p>{this.state.partyExistMessage}</p>\n          <br/>\n\n          <Autocomplete\n            suggestions={this.state.machineNamesFromApi}\n            callbackFromParent={this.myCallbackForSelectedMachine}\n            placeholderfrom={\"Machine name\"}\n            checkFromParent={this.state.checkmachine}\n          />\n\n          <br/>\n          <br/>\n\n          <input\n            type=\"date\"\n            //data-date=\"\"\n            data-date-format=\"YYYY-MM-DD\"\n            defaultValue={this.state.date}\n            name=\"date\"\n            onChange={e => {\n              this.state.date = e.target.value;\n            }}\n            required\n          />\n\n          <br/>\n          <br/>\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"remark\"\n            placeholder=\"Remark\"\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            //minLength=\"5\"\n            onChange={e => {\n              this.state.remark = e.target.value;\n            }}\n            //required\n          />\n\n          <br/>\n          <br/>\n\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            name=\"dieselAmount\"\n            placeholder=\"Diesel Amount\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.dieselAmount = parseInt(e.target.value);\n            }}\n            required\n          />\n\n          <br/>\n          <br/>\n\n\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            name=\"drillingFeet\"\n            placeholder=\"Drilling Feet\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.drillingFeet = parseInt(e.target.value);\n            }}\n            required\n          />\n        </div>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}