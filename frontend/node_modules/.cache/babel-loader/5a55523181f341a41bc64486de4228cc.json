{"ast":null,"code":"var _jsxFileName = \"E:\\\\registration\\\\frontend\\\\src\\\\components\\\\registration\\\\PurchasePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class PurchasePartyRegistration extends React.Component {\n  // Fetch party list and contact list from server\n  // Check existence of party name\n  //Form Handler\n  // toggle load status\n  constructor(props) {\n    super(props);\n\n    this.fetchProduct = async () => {\n      try {\n        const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-purchaseparty/\");\n        const jsonPartyList = await responsePartyList.json();\n        this.state.partyList = jsonPartyList;\n      } catch {\n        this.toggleLoadStatus();\n      }\n    };\n\n    this.checkParty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/purchase-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {//alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.toggleLoadStatus = async () => {\n      if (this.state.loadingStatus.visibility === \"visible\") {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"hidden\"\n          },\n          loadedStatus: {\n            visibility: \"visible\"\n          }\n        });\n      } else {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"visible\"\n          },\n          loadedStatus: {\n            visibility: \"hidden\"\n          }\n        });\n      }\n    };\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      partyContacts: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Purchase Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(InputPartyNameField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyName = dataFromChild;\n      },\n      checkFromParent: this.checkParty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(InputContactField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyContact = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(InputPartyVillageField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyVillage = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["E:/registration/frontend/src/components/registration/PurchasePartyRegistration.js"],"names":["React","axios","InputPartyNameField","InputContactField","InputPartyVillageField","PurchasePartyRegistration","Component","constructor","props","fetchProduct","responsePartyList","fetch","jsonPartyList","json","state","partyList","toggleLoadStatus","checkParty","setState","partyExistMessage","responseMessage","buttonStatus","visibility","showList","item","index","partyName","toLowerCase","name","forEach","err","onSubmit","e","post","contact","partyContact","village","partyVillage","then","res","data","catch","error","target","reset","preventDefault","loadingStatus","loadedStatus","partyContacts","bind","componentDidMount","render","dataFromChild"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AAEA,eAAe,MAAMC,yBAAN,SAAwCL,KAAK,CAACM,SAA9C,CAAwD;AACrE;AAaA;AAyBA;AAqBA;AAsBAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAhFnBC,YAgFmB,GAhFJ,YAAY;AACzB,UAAI;AACF,cAAMC,iBAAiB,GAAG,MAAMC,KAAK,CACnC,8CADmC,CAArC;AAGA,cAAMC,aAAa,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,EAA5B;AACA,aAAKC,KAAL,CAAWC,SAAX,GAAuBH,aAAvB;AACD,OAND,CAME,MAAM;AACN,aAAKI,gBAAL;AACD;AACF,KAsEkB;;AAAA,SAnEnBC,UAmEmB,GAnEN,MAAM;AACjB,UAAI;AACF,aAAKC,QAAL,CAAc;AACZC,UAAAA,iBAAiB,EAAE,EADP;AAEZC,UAAAA,eAAe,EAAE,EAFL;AAGZC,UAAAA,YAAY,EAAE;AACZC,YAAAA,UAAU,EAAE;AADA;AAHF,SAAd;;AAOA,cAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,cAAI,KAAKX,KAAL,CAAWY,SAAX,CAAqBC,WAArB,OAAuCH,IAAI,CAACI,IAAL,CAAUD,WAAV,EAA3C,EAAoE;AAClE,iBAAKT,QAAL,CAAc;AACZC,cAAAA,iBAAiB,EAAE,uCADP;AAEZE,cAAAA,YAAY,EAAE;AACZC,gBAAAA,UAAU,EAAE;AADA;AAFF,aAAd;AAMD,WAPD,MAOO,CACN;AACF,SAVD;;AAWA,aAAKR,KAAL,CAAWC,SAAX,CAAqBc,OAArB,CAA6BN,QAA7B;AACD,OApBD,CAoBE,OAAOO,GAAP,EAAY,CAAE;AACjB,KA6CkB;;AAAA,SA1CnBC,QA0CmB,GA1CRC,CAAC,IAAI;AACd/B,MAAAA,KAAK,CACFgC,IADH,CACQ,oDADR,EAC8D;AAC1DL,QAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWY,SADyC;AAE1DQ,QAAAA,OAAO,EAAE,KAAKpB,KAAL,CAAWqB,YAFsC;AAG1DC,QAAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWuB;AAHsC,OAD9D,EAMGC,IANH,CAMQC,GAAG,IAAI;AACX,aAAKzB,KAAL,CAAWL,YAAX;AACA,aAAKS,QAAL,CAAc;AACZE,UAAAA,eAAe,EAAEmB,GAAG,CAACC;AADT,SAAd;AAGD,OAXH,EAYGC,KAZH,CAYSC,KAAK,IAAI,CACd;AACD,OAdH;AAeAV,MAAAA,CAAC,CAACW,MAAF,CAASC,KAAT;AACAZ,MAAAA,CAAC,CAACa,cAAF;AACD,KAwBkB;;AAAA,SArBnB7B,gBAqBmB,GArBA,YAAY;AAC7B,UAAI,KAAKF,KAAL,CAAWgC,aAAX,CAAyBxB,UAAzB,KAAwC,SAA5C,EAAuD;AACrD,cAAM,KAAKJ,QAAL,CAAc;AAClB4B,UAAAA,aAAa,EAAE;AACbxB,YAAAA,UAAU,EAAE;AADC,WADG;AAIlByB,UAAAA,YAAY,EAAE;AACZzB,YAAAA,UAAU,EAAE;AADA;AAJI,SAAd,CAAN;AAQD,OATD,MASO;AACL,cAAM,KAAKJ,QAAL,CAAc;AAClB4B,UAAAA,aAAa,EAAE;AACbxB,YAAAA,UAAU,EAAE;AADC,WADG;AAIlByB,UAAAA,YAAY,EAAE;AACZzB,YAAAA,UAAU,EAAE;AADA;AAJI,SAAd,CAAN;AAQD;AACF,KACkB;;AAGjB,SAAKR,KAAL,GAAa;AACXY,MAAAA,SAAS,EAAE,EADA;AAEXS,MAAAA,YAAY,EAAE,EAFH;AAGXE,MAAAA,YAAY,EAAE,EAHH;AAIXtB,MAAAA,SAAS,EAAE,EAJA;AAKXI,MAAAA,iBAAiB,EAAE,EALR;AAMX6B,MAAAA,aAAa,EAAE,EANJ;AAOX5B,MAAAA,eAAe,EAAE,EAPN;AAQXC,MAAAA,YAAY,EAAE;AACZC,QAAAA,UAAU,EAAE;AADA,OARH;AAWXwB,MAAAA,aAAa,EAAE;AACbxB,QAAAA,UAAU,EAAE;AADC,OAXJ;AAcXyB,MAAAA,YAAY,EAAE;AACZzB,QAAAA,UAAU,EAAE;AADA;AAdH,KAAb;AAmBA,SAAKb,YAAL,GAAoB,KAAKA,YAAL,CAAkBwC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKhC,UAAL,GAAkB,KAAKA,UAAL,CAAgBgC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKlB,QAAL,GAAgB,KAAKA,QAAL,CAAckB,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKjC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBiC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKxC,YAAL;AACD;;AAEDyC,EAAAA,iBAAiB,GAAG;AAClB,SAAKlC,gBAAL;AACD;;AACDmC,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,QAAQ,EAAEnB,CAAC,IAAI,KAAKD,QAAL,CAAcC,CAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAJF,EAKE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,mBAAD;AACE,MAAA,kBAAkB,EAAEoB,aAAa,IAAI;AACnC,aAAKtC,KAAL,CAAWY,SAAX,GAAuB0B,aAAvB;AACD,OAHH;AAIE,MAAA,eAAe,EAAE,KAAKnC,UAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKH,KAAL,CAAWK,iBAAf,CAPF,EASE,oBAAC,iBAAD;AACE,MAAA,kBAAkB,EAAEiC,aAAa,IAAI;AACnC,aAAKtC,KAAL,CAAWqB,YAAX,GAA0BiB,aAA1B;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF,EAkBE,oBAAC,sBAAD;AACE,MAAA,kBAAkB,EAAEA,aAAa,IAAI;AACnC,aAAKtC,KAAL,CAAWuB,YAAX,GAA0Be,aAA1B;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBF,CALF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKtC,KAAL,CAAWM,eAAf,CA7BF,EA8BE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,sBAFZ;AAGE,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,YAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BF,CADF;AAwCD;;AA3JoE","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\r\nimport InputContactField from \"../modular/InputContactField\";\r\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\r\n\r\nexport default class PurchasePartyRegistration extends React.Component {\r\n  // Fetch party list and contact list from server\r\n  fetchProduct = async () => {\r\n    try {\r\n      const responsePartyList = await fetch(\r\n        \"http://127.0.0.1:8000/list-of-purchaseparty/\"\r\n      );\r\n      const jsonPartyList = await responsePartyList.json();\r\n      this.state.partyList = jsonPartyList;\r\n    } catch {\r\n      this.toggleLoadStatus();\r\n    }\r\n  };\r\n\r\n  // Check existence of party name\r\n  checkParty = () => {\r\n    try {\r\n      this.setState({\r\n        partyExistMessage: \"\",\r\n        responseMessage: \"\",\r\n        buttonStatus: {\r\n          visibility: \"visible\"\r\n        }\r\n      });\r\n      const showList = (item, index) => {\r\n        if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\r\n          this.setState({\r\n            partyExistMessage: \"* This party name is already exist!!!\",\r\n            buttonStatus: {\r\n              visibility: \"hidden\"\r\n            }\r\n          });\r\n        } else {\r\n        }\r\n      };\r\n      this.state.partyList.forEach(showList);\r\n    } catch (err) {}\r\n  };\r\n\r\n  //Form Handler\r\n  onSubmit = e => {\r\n    axios\r\n      .post(\"http://127.0.0.1:8000/purchase-party-registration/\", {\r\n        name: this.state.partyName,\r\n        contact: this.state.partyContact,\r\n        village: this.state.partyVillage\r\n      })\r\n      .then(res => {\r\n        this.state.fetchProduct();\r\n        this.setState({\r\n          responseMessage: res.data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        //alert(error.response.request._response);\r\n      });\r\n    e.target.reset();\r\n    e.preventDefault();\r\n  };\r\n\r\n  // toggle load status\r\n  toggleLoadStatus = async () => {\r\n    if (this.state.loadingStatus.visibility === \"visible\") {\r\n      await this.setState({\r\n        loadingStatus: {\r\n          visibility: \"hidden\"\r\n        },\r\n        loadedStatus: {\r\n          visibility: \"visible\"\r\n        }\r\n      });\r\n    } else {\r\n      await this.setState({\r\n        loadingStatus: {\r\n          visibility: \"visible\"\r\n        },\r\n        loadedStatus: {\r\n          visibility: \"hidden\"\r\n        }\r\n      });\r\n    }\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      partyName: \"\",\r\n      partyContact: \"\",\r\n      partyVillage: \"\",\r\n      partyList: {},\r\n      partyExistMessage: \"\",\r\n      partyContacts: \"\",\r\n      responseMessage: \"\",\r\n      buttonStatus: {\r\n        visibility: \"visible\"\r\n      },\r\n      loadingStatus: {\r\n        visibility: \"visible\"\r\n      },\r\n      loadedStatus: {\r\n        visibility: \"hidden\"\r\n      }\r\n    };\r\n\r\n    this.fetchProduct = this.fetchProduct.bind(this);\r\n    this.checkParty = this.checkParty.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\r\n    this.fetchProduct();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.toggleLoadStatus();\r\n  }\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"form-container form-group\"\r\n        onSubmit={e => this.onSubmit(e)}\r\n      >\r\n        <p className=\"headingViewPart\">Purchase Party Registration</p>\r\n        <div className=\"pt-5\">\r\n          <InputPartyNameField\r\n            callbackFromParent={dataFromChild => {\r\n              this.state.partyName = dataFromChild;\r\n            }}\r\n            checkFromParent={this.checkParty}\r\n          />\r\n          <p>{this.state.partyExistMessage}</p>\r\n\r\n          <InputContactField\r\n            callbackFromParent={dataFromChild => {\r\n              this.state.partyContact = dataFromChild;\r\n            }}\r\n          />\r\n\r\n          <br />\r\n          <br />\r\n\r\n          <InputPartyVillageField\r\n            callbackFromParent={dataFromChild => {\r\n              this.state.partyVillage = dataFromChild;\r\n            }}\r\n          />\r\n        </div>\r\n        <p>{this.state.responseMessage}</p>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-outline-dark\"\r\n          style={this.state.buttonStatus}\r\n        >\r\n          Save\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}