{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    }; // Fetch party list and contact list from server\n\n    this.state.fetchProduct = async () => {\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n      const responseContactList = await fetch(\"http://127.0.0.1:8000/list-of-partycontacts/\");\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n    };\n\n    this.state.fetchProduct(); // Take name and village from contact\n\n    this.state.getNameVillage = matchContact => {\n      axios.post('http://127.0.0.1:8000/party-through-contact/', {\n        contact: matchContact\n      }).then(res => {\n        const jsonNameVillage = JSON.parse(res.data);\n        console.log(\"Name \", jsonNameVillage.name);\n        console.log(\"Village \", jsonNameVillage.village);\n      }).catch(error => {\n        console.log(error.response.request._response);\n      });\n    }; // Check existence of party name\n\n\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    }; //Form Handler\n\n\n    this.state.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(InputPartyNameField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyName = dataFromChild;\n      },\n      checkFromParent: this.state.checkparty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"partyContact\",\n      placeholder: \"Party Contact\",\n      autoComplete: \"off\",\n      maxLength: \"10\",\n      minLength: \"10\",\n      onChange: e => {\n        this.state.partyContact = e.target.value;\n\n        if (e.target.value.length === 10) {\n          if (this.state.partyContacts.indexOf(e.target.value) > -1) {\n            this.state.getNameVillage(e.target.value);\n          }\n        }\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(InputPartyVillageField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyVillage = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","InputPartyNameField","InputContactField","InputPartyVillageField","MachinePartyRegistration","Component","constructor","props","state","partyName","partyContact","partyVillage","partyList","partyExistMessage","responseMessage","partyContacts","buttonStatus","visibility","fetchProduct","responsePartyList","fetch","jsonPartyList","json","responseContactList","jsonContactList","getNameVillage","matchContact","post","contact","then","res","jsonNameVillage","JSON","parse","data","console","log","name","village","catch","error","response","request","_response","checkparty","setState","showList","item","index","toLowerCase","forEach","err","onSubmit","e","alert","target","reset","preventDefault","render","dataFromChild","value","length","indexOf"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    };\n\n    // Fetch party list and contact list from server\n    this.state.fetchProduct = async () =>{\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n      const responseContactList = await fetch(\n        \"http://127.0.0.1:8000/list-of-partycontacts/\"\n      );\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n    }\n    \n    \n    this.state.fetchProduct(); \n\n    // Take name and village from contact\n    this.state.getNameVillage = (matchContact) => {\n      axios.post('http://127.0.0.1:8000/party-through-contact/', \n      {\n        contact: matchContact\n      }\n      ).then(res => {\n        const jsonNameVillage= JSON.parse(res.data)\n        console.log(\"Name \",jsonNameVillage.name)\n        console.log(\"Village \",jsonNameVillage.village)\n      }\n      ).catch(error => {\n        console.log( error.response.request._response )\n      });\n    }    \n\n    // Check existence of party name\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    //Form Handler\n    this.state.onSubmit = e => {\n      axios\n        .post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n          name: this.state.partyName,\n          contact: this.state.partyContact,\n          village: this.state.partyVillage\n        })\n        .then(res => {\n          this.state.fetchProduct();\n          this.setState({\n            responseMessage: res.data\n          });\n        })\n        .catch(error => {\n          alert(error.response.request._response);\n        });\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.state.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          <InputPartyNameField\n            callbackFromParent={dataFromChild => {\n              this.state.partyName = dataFromChild;\n            }}\n            checkFromParent={this.state.checkparty}\n          />\n\n        <input \n            type=\"number\" \n            className=\"mb-2\" \n            name=\"partyContact\" \n            placeholder=\"Party Contact\" \n            autoComplete=\"off\"\n            maxLength = \"10\"\n            minLength = \"10\"\n            onChange={\n                e => {\n                    this.state.partyContact = e.target.value;\n                    if(e.target.value.length === 10){\n                      if(this.state.partyContacts.indexOf(e.target.value)>-1){\n                        this.state.getNameVillage(e.target.value);\n                      }\n                    }\n                }\n            } \n            required\n        />\n\n          {/* <InputContactField\n            callbackFromParent={dataFromChild => {\n              this.state.partyContact = dataFromChild;\n            }}\n          /> */}\n\n          <br />\n          <br />\n\n          <InputPartyVillageField\n            callbackFromParent={dataFromChild => {\n              this.state.partyVillage = dataFromChild;\n            }}\n          />\n        </div>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}