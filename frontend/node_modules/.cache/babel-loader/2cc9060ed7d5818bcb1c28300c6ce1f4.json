{"ast":null,"code":"var _jsxFileName = \"/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nimport InputField from '../modular/InputField';\nexport default class Machinereg extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      machineName: \"\",\n      machineList: {},\n      errorMessage: \"\"\n    };\n\n    const handleSubmit = event => {\n      event.preventDefault();\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    const fetchProduct = async () => {\n      console.log(\"Fetch calls\");\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      this.state.machineList = jsonMachineList;\n    };\n\n    fetchProduct();\n\n    function checkMachine() {\n      try {\n        //errors.firstName.message();\n        this.state.errorMessage = \"\";\n\n        const showList = (item, index) => {\n          if (this.state.machineName === item.name) {\n            this.state.errorMessage = \"* This machine name is already exist!!!\";\n          } else {}\n        };\n\n        this.state.machineList.forEach(showList);\n      } catch (err) {}\n    }\n\n    this.onSubmit = (data, e) => {\n      alert(\"machine registered successfully\" + this.state.machineName);\n      axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n        name: this.state.machineName\n      }).then(res => {\n        console.log(res);\n        console.log(res.data); //setMachineList(res);\n      });\n      e.target.reset();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: this.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Machine Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"machineName\",\n      placeholder: \"Machine Name\",\n      onChange: e => this.state.machineName = e.target.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}\n\nfunction MachineRegistration() {\n  const [machineName, setMachineName] = useState(\"\");\n  const [machineList, setMachineList] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () => {\n    console.log(\"Fetch calls\");\n    const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n    const jsonMachineList = await responseMachineList.json();\n    setMachineList(jsonMachineList);\n  };\n\n  fetchProduct();\n\n  function checkMachine() {\n    try {\n      //errors.firstName.message();\n      setErrorMessage(\"\");\n\n      const showList = (item, index) => {\n        if (machineName === item.name) {\n          setErrorMessage(\"* This machine name is already exist!!!\");\n        } else {}\n      };\n\n      machineList.forEach(showList);\n    } catch (err) {}\n  }\n\n  useEffect(() => {\n    checkMachine();\n  }, [machineList]);\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm();\n\n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\" + machineName);\n    axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n      name: machineName\n    }).then(res => {\n      console.log(res);\n      console.log(res.data); //setMachineList(res);\n    });\n    e.target.reset();\n  };\n\n  console.log(errors);\n  return React.createElement(\"form\", {\n    className: \"form-container form-group\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"headingViewPart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Machine Registration\"), React.createElement(\"div\", {\n    className: \"pt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"mb-2\",\n    name: \"machineName\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    placeholder: \"Machine Name\",\n    onChange: e => setMachineName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-outline-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Save\"));\n}\n/*\n                <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => userInput(e.target.value)} \n                />\n*/","map":{"version":3,"sources":["/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","useState","useEffect","axios","useForm","InputField","Machinereg","Component","constructor","props","state","machineName","machineList","errorMessage","handleSubmit","event","preventDefault","bind","fetchProduct","console","log","responseMachineList","fetch","jsonMachineList","json","checkMachine","showList","item","index","name","forEach","err","onSubmit","data","e","alert","post","then","res","target","reset","render","value","MachineRegistration","setMachineName","setMachineList","setErrorMessage","register","errors","required","maxLength","minLength","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,eAAe,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAwC;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACVC,MAAAA,WAAW,EAAE,EADH;AAEVC,MAAAA,WAAW,EAAE,EAFH;AAGVC,MAAAA,YAAY,EAAE;AAHJ,KAAZ;;AAMA,UAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5BA,MAAAA,KAAK,CAACC,cAAN;AACD,KAFD;;AAIA,SAAKF,YAAL,GAAoB,KAAKA,YAAL,CAAkBG,IAAlB,CAAuB,IAAvB,CAApB;;AAEA,UAAMC,YAAY,GAAG,YAAW;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMC,mBAAmB,GAAG,MAAMC,KAAK,CAAC,yCAAD,CAAvC;AACA,YAAMC,eAAe,GAAG,MAAMF,mBAAmB,CAACG,IAApB,EAA9B;AACA,WAAKd,KAAL,CAAWE,WAAX,GAAuBW,eAAvB;AACD,KALD;;AAOAL,IAAAA,YAAY;;AAEZ,aAASO,YAAT,GAAwB;AACtB,UAAI;AACF;AACA,aAAKf,KAAL,CAAWG,YAAX,GAAwB,EAAxB;;AACA,cAAMa,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,cAAI,KAAKlB,KAAL,CAAWC,WAAX,KAA2BgB,IAAI,CAACE,IAApC,EAA0C;AACxC,iBAAKnB,KAAL,CAAWG,YAAX,GAAyB,yCAAzB;AACD,WAFD,MAGI,CAAE;AACP,SALD;;AAMA,aAAKH,KAAL,CAAWE,WAAX,CAAuBkB,OAAvB,CAA+BJ,QAA/B;AACD,OAVD,CAWA,OAAOK,GAAP,EAAY,CAAE;AACf;;AAED,SAAKC,QAAL,GAAgB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC3BC,MAAAA,KAAK,CAAC,oCAAkC,KAAKzB,KAAL,CAAWC,WAA9C,CAAL;AACAR,MAAAA,KAAK,CAACiC,IAAN,CAAY,6CAAZ,EAA0D;AACtDP,QAAAA,IAAI,EAAE,KAAKnB,KAAL,CAAWC;AADqC,OAA1D,EAGG0B,IAHH,CAGQC,GAAG,IAAI;AACXnB,QAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAG,CAACL,IAAhB,EAFW,CAGX;AACD,OAPH;AAQAC,MAAAA,CAAC,CAACK,MAAF,CAASC,KAAT;AACD,KAXD;AAYD;;AAEDC,EAAAA,MAAM,GAAE;AACN,WACE;AAAM,MAAA,SAAS,EAAC,2BAAhB;AAA4C,MAAA,QAAQ,EAAE,KAAK3B,YAAL,CAAkB,KAAKkB,QAAvB,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADA,EAEA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AACM,MAAA,IAAI,EAAC,MADX;AAEM,MAAA,SAAS,EAAC,MAFhB;AAGM,MAAA,IAAI,EAAC,aAHX;AAIM,MAAA,WAAW,EAAC,cAJlB;AAKM,MAAA,QAAQ,EAAGE,CAAC,IAAI,KAAKxB,KAAL,CAAWC,WAAX,GAAuBuB,CAAC,CAACK,MAAF,CAASG,KALtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFA,EAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXA,EAYA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,sBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZA,CADF;AAgBD;;AAtEoD;;AA4EvD,SAASC,mBAAT,GAA+B;AAC7B,QAAM,CAAChC,WAAD,EAAciC,cAAd,IAAgC3C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,WAAD,EAAciC,cAAd,IAAgC5C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,YAAD,EAAeiC,eAAf,IAAkC7C,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMiB,YAAY,GAAG,YAAW;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAMC,mBAAmB,GAAG,MAAMC,KAAK,CAAC,yCAAD,CAAvC;AACA,UAAMC,eAAe,GAAG,MAAMF,mBAAmB,CAACG,IAApB,EAA9B;AACAqB,IAAAA,cAAc,CAACtB,eAAD,CAAd;AACD,GALH;;AAOEL,EAAAA,YAAY;;AAEZ,WAASO,YAAT,GAAwB;AACtB,QAAI;AACF;AACAqB,MAAAA,eAAe,CAAC,EAAD,CAAf;;AACA,YAAMpB,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,YAAIjB,WAAW,KAAKgB,IAAI,CAACE,IAAzB,EAA+B;AAC7BiB,UAAAA,eAAe,CAAC,yCAAD,CAAf;AACD,SAFD,MAGI,CAAE;AACP,OALD;;AAMAlC,MAAAA,WAAW,CAACkB,OAAZ,CAAoBJ,QAApB;AACD,KAVD,CAWA,OAAOK,GAAP,EAAY,CAAE;AACf;;AAED7B,EAAAA,SAAS,CACP,MAAM;AACJuB,IAAAA,YAAY;AACb,GAHM,EAIP,CAACb,WAAD,CAJO,CAAT;AAOF,QAAM;AAAEmC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBlC,IAAAA,YAApB;AAAkC0B,IAAAA;AAAlC,MAA4CpC,OAAO,EAAzD;;AAEA,QAAM4B,QAAQ,GAAG,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC5BC,IAAAA,KAAK,CAAC,oCAAkCxB,WAAnC,CAAL;AACAR,IAAAA,KAAK,CAACiC,IAAN,CAAY,6CAAZ,EAA0D;AACtDP,MAAAA,IAAI,EAAElB;AADgD,KAA1D,EAGG0B,IAHH,CAGQC,GAAG,IAAI;AACXnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAG,CAACL,IAAhB,EAFW,CAGX;AACD,KAPH;AAQAC,IAAAA,CAAC,CAACK,MAAF,CAASC,KAAT;AACD,GAXD;;AAYArB,EAAAA,OAAO,CAACC,GAAR,CAAY4B,MAAZ;AAEA,SACK;AAAM,IAAA,SAAS,EAAC,2BAAhB;AAA4C,IAAA,QAAQ,EAAElC,YAAY,CAACkB,QAAD,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAG,IAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,EAEA;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACO;AACM,IAAA,IAAI,EAAC,MADX;AAEM,IAAA,SAAS,EAAC,MAFhB;AAGM,IAAA,IAAI,EAAC,aAHX;AAIM,IAAA,GAAG,EAAEe,QAAQ,CAAC;AACZE,MAAAA,QAAQ,EAAE,IADE;AAEZC,MAAAA,SAAS,EAAE,EAFC;AAGZC,MAAAA,SAAS,EAAE;AAAET,QAAAA,KAAK,EAAE,CAAT;AAAYU,QAAAA,OAAO,EAAE;AAArB;AAHC,KAAD,CAJnB;AASM,IAAA,WAAW,EAAC,cATlB;AAUM,IAAA,QAAQ,EAAElB,CAAC,IAAIU,cAAc,CAACV,CAAC,CAACK,MAAF,CAASG,KAAV,CAVnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADP,CAFA,EAgBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBP,EAiBA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,sBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBA,CADL;AAqBD;AAED","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nimport InputField from '../modular/InputField';\n\nexport default class Machinereg extends React.Component{\n  constructor(props){\n    super(props);\n    this.state= {\n      machineName: \"\",\n      machineList: {},\n      errorMessage: \"\",\n    }    \n\n    const handleSubmit = event => {\n      event.preventDefault()\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n\n    const fetchProduct = async () =>{\n      console.log(\"Fetch calls\");\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      this.state.machineList=jsonMachineList;\n    }\n  \n    fetchProduct(); \n\n    function checkMachine() {\n      try {\n        //errors.firstName.message();\n        this.state.errorMessage=\"\";\n        const showList = (item, index) => {\n          if (this.state.machineName === item.name) {\n            this.state.errorMessage =\"* This machine name is already exist!!!\";\n          }\n          else{}\n        };\n        this.state.machineList.forEach(showList);\n      } \n      catch (err) {}\n    }\n\n    this.onSubmit = (data, e) => {\n      alert(\"machine registered successfully\"+this.state.machineName);\n      axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n          name: this.state.machineName\n        })\n        .then(res => {\n          console.log(res);\n          console.log(res.data);\n          //setMachineList(res);\n        });\n      e.target.reset();\n    };\n  }\n\n  render(){\n    return (\n      <form className=\"form-container form-group\" onSubmit={this.handleSubmit(this.onSubmit)}>\n      <p className=\"headingViewPart\">Machine Registration</p>\n      <div className=\"pt-5\">\n      <input \n            type=\"text\" \n            className=\"mb-2\" \n            name=\"machineName\" \n            placeholder=\"Machine Name\" \n            onChange={ e => this.state.machineName=e.target.value } \n      />\n      </div>\n      <br/>\n      <button type=\"submit\" className=\"btn btn-outline-dark\">Save</button>\n      </form> \n    );\n  }\n\n}\n\n\n\nfunction MachineRegistration() {\n  const [machineName, setMachineName] = useState(\"\");\n  const [machineList, setMachineList] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () =>{\n      console.log(\"Fetch calls\");\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      setMachineList(jsonMachineList);\n    }\n  \n    fetchProduct(); \n\n    function checkMachine() {\n      try {\n        //errors.firstName.message();\n        setErrorMessage(\"\");\n        const showList = (item, index) => {\n          if (machineName === item.name) {\n            setErrorMessage(\"* This machine name is already exist!!!\");\n          }\n          else{}\n        };\n        machineList.forEach(showList);\n      } \n      catch (err) {}\n    }\n\n    useEffect(\n      () => {\n        checkMachine();\n      },\n      [machineList]\n    );\n\n  const { register, errors, handleSubmit, reset } = useForm();\n  \n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\"+machineName);\n    axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n        name: machineName\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        //setMachineList(res);\n      });\n    e.target.reset();\n  };\n  console.log(errors);\n\n  return (\n\t\t\t\t\t\t\t<form className=\"form-container form-group\" onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t\t\t<p className=\"headingViewPart\">Machine Registration</p>\n\t\t\t\t\t\t\t<div className=\"pt-5\">\n              <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => setMachineName(e.target.value)} \n              />\n\t\t\t\t\t\t\t</div>\n              <br/>\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-outline-dark\">Save</button>\n\t\t\t\t\t\t\t</form>      \n  );\n}\n\n/*\n                <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => userInput(e.target.value)} \n                />\n*/"]},"metadata":{},"sourceType":"module"}