{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/MachineRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nexport default class MachineRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-registration/\", {\n        name: this.state.machineName\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.fetchProduct = async () => {\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      this.setState({\n        machineList: jsonMachineList\n      });\n    };\n\n    this.state = {\n      machineName: \"\",\n      machineExistStatus: \"\",\n      machineList: {},\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    }; // Fetch machine list from server\n    //this.state.fetchProduct();\n    // Check existence of machine name\n\n    this.state.checkMachine = () => {\n      try {\n        this.setState({\n          machineExistStatus: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.machineName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              machineExistStatus: \"* This machine name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.machineList.forEach(showList);\n      } catch (err) {}\n\n      console.log(this.state.machineName);\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProduct();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Machine Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"machineName\",\n      placeholder: \"Machine Name\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      value: this.state.machineName,\n      onChange: e => {\n        this.state.machineName = e.target.value; //this.setState({ [e.target.name]: e.target.value });\n        //console.log(e.target.name,\"as\", e.target.value);\n\n        this.state.checkMachine();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.machineExistStatus), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","axios","MachineRegistration","Component","constructor","props","onSubmit","e","post","name","state","machineName","then","res","fetchProduct","setState","responseMessage","data","catch","error","alert","response","request","_response","target","reset","preventDefault","responseMachineList","fetch","jsonMachineList","json","machineList","machineExistStatus","buttonStatus","visibility","checkMachine","showList","item","index","toLowerCase","forEach","err","console","log","componentDidMount","render","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nexport default class MachineRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      machineName: \"\",\n      machineExistStatus: \"\",\n      machineList: {},\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    }\n  \n    \n\n    // Fetch machine list from server\n    \n    \n    //this.state.fetchProduct();\n\n    // Check existence of machine name\n    this.state.checkMachine = () => {\n      try {\n        this.setState({\n          machineExistStatus: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n        const showList = (item, index) => {\n          if (\n            this.state.machineName.toLowerCase() === item.name.toLowerCase()\n          ) {\n            this.setState({\n              machineExistStatus: \"* This machine name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.machineList.forEach(showList);\n      } catch (err) {}\n      console.log(this.state.machineName);\n      \n    };\n\n    \n  }\n  onSubmit = e => {\n    axios\n      .post(\"http://127.0.0.1:8000/machine-registration/\", {\n        name: this.state.machineName\n      })\n      .then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      })\n      .catch(error => {\n        alert(error.response.request._response);\n      });\n    e.target.reset();\n    e.preventDefault();\n  };\n  fetchProduct = async () => {\n    const responseMachineList = await fetch(\n      \"http://127.0.0.1:8000/list-of-machines/\"\n    );\n    const jsonMachineList = await responseMachineList.json();\n    this.setState({machineList : jsonMachineList})\n  };\n  componentDidMount() {\n    this.fetchProduct();\n  }\n  \n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Registration</p>\n        <div className=\"pt-5\">\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"machineName\"\n            placeholder=\"Machine Name\"\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            value={this.state.machineName}\n            onChange=\n            {e => {\n              this.state.machineName = e.target.value;\n              //this.setState({ [e.target.name]: e.target.value });\n              //console.log(e.target.name,\"as\", e.target.value);\n              \n              this.state.checkMachine();\n            }}\n            \n            required\n          />\n        </div>\n        <p>{this.state.machineExistStatus}</p>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}