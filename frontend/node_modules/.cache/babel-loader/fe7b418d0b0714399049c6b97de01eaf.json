{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: null,\n      partyList: [],\n      machineList: [],\n      remark: \"\",\n      partyExistMessage: \"\",\n      buttonStatus: {\n        visibility: 'visible'\n      },\n      radioButtonStyle: {\n        float: 'left'\n      }\n    }; // Fetch party list from server\n\n    this.state.fetchProduct = async () => {\n      const responsepartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonpartyList = await responsepartyList.json();\n      this.state.partyList = jsonpartyList;\n      const responsemachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonmachineList = await responsemachineList.json();\n      this.state.machineList = jsonmachineList;\n    };\n\n    this.state.fetchProduct(); // Check existence of party name \n\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          buttonStatus: {\n            visibility: 'visible'\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: 'hidden'\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      axios.post('http://127.0.0.1:8000/machine-party-registration/', {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    var curr = new Date();\n    curr.setDate(curr.getDate() + 3);\n    var date = curr.toISOString().substr(0, 10);\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyName\",\n      placeholder: \"Party Name\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyName = e.target.value;\n        this.state.checkparty();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"select\", {\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.state.machineList.map(v => React.createElement(\"option\", {\n      key: v.name,\n      value: v.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, v.name))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"select\", {\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.partyList.map(v => React.createElement(\"option\", {\n      key: v.name,\n      value: v.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, v.name))), React.createElement(\"input\", {\n      type: \"date\",\n      \"data-date\": \"\",\n      \"data-date-format\": \"YYYY-MM-DD\",\n      defaultValue: date,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js"],"names":["React","axios","MachinePartyRegistration","Component","constructor","props","state","date","partyList","machineList","remark","partyExistMessage","buttonStatus","visibility","radioButtonStyle","float","fetchProduct","responsepartyList","fetch","jsonpartyList","json","responsemachineList","jsonmachineList","checkparty","setState","showList","item","index","partyName","toLowerCase","name","forEach","err","onSubmit","e","post","contact","partyContact","village","partyVillage","then","res","catch","error","alert","response","request","_response","target","reset","preventDefault","render","curr","Date","setDate","getDate","toISOString","substr","value","handleChange","map","v"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nexport default class MachinePartyRegistration extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      date: null,\n      \n      partyList: [],\n      machineList: [],\n\n      remark:\"\",\n\n      partyExistMessage: \"\",\n      buttonStatus: {\n          visibility: 'visible'\n      },\n      radioButtonStyle: {\n          float: 'left'\n      }\n    }\n\n    // Fetch party list from server\n    this.state.fetchProduct = async () =>{\n      const responsepartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonpartyList = await responsepartyList.json();\n      this.state.partyList = jsonpartyList;\n\n      const responsemachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonmachineList = await responsemachineList.json();\n      this.state.machineList = jsonmachineList;\n\n\n    }\n    \n    \n    this.state.fetchProduct(); \n\n\n    // Check existence of party name \n    this.state.checkparty = () => {\n      try {\n        this.setState({\n             partyExistMessage :\"\",\n             buttonStatus: {\n                 visibility: 'visible'           \n             }\n            });\n        const showList = (item, index) => {\n            if (this.state.partyName.toLowerCase() === item.name.toLowerCase()){\n              this.setState({\n                 partyExistMessage :\"* This party name is already exist!!!\",\n                    buttonStatus: {\n                  visibility: 'hidden'                 \n                 }\n              });\n            }\n            else{}\n        };\n        this.state.partyList.forEach(showList);\n      } \n      catch (err) {}\n    }\n\n    this.state.onSubmit =(e) => {\n        axios.post('http://127.0.0.1:8000/machine-party-registration/', \n        {\n          name: this.state.partyName,\n          contact: this.state.partyContact,\n          village: this.state.partyVillage\n        }\n        ).then(res => {\n          this.state.fetchProduct();\n        }\n        ).catch(error => {\n          alert( error.response.request._response )\n        });\n      e.target.reset();\n      e.preventDefault();\n    };\n  \n  }\n \n  render(){\n    var curr = new Date();\n    curr.setDate(curr.getDate() + 3);\n    var date = curr.toISOString().substr(0,10);\n    return (\n\t\t<form className=\"form-container form-group\" onSubmit={ e => this.state.onSubmit(e) }>\n         <p className=\"headingViewPart\">Machine Party Registration</p>\n\t\t<div className=\"pt-5\">\n\n        <input \n            type=\"text\" \n            className=\"mb-2\" \n            name=\"partyName\" \n            placeholder=\"Party Name\" \n            autoComplete=\"off\"\n            maxLength = \"30\"\n            minLength = \"5\"\n            onChange={\n                e => {\n                    this.state.partyName = e.target.value;\n                    this.state.checkparty();\n                }\n            } \n            required\n        />\n        \n        <p>{this.state.partyExistMessage}</p>\n        <br/>  \n\n        <select onChange={this.handleChange}>\n            {this.state.machineList.map(v => (\n              <option key={v.name} value={v.name}>\n                {v.name}\n              </option>\n            ))}\n          </select>\n\n        <br/>\n        <br/>\n        <select onChange={this.handleChange}>\n            {this.state.partyList.map(v => (\n              <option key={v.name} value={v.name}>\n                {v.name}\n              </option>\n            ))}\n          </select>\n          \n        <input type=\"date\" data-date=\"\" data-date-format=\"YYYY-MM-DD\" defaultValue={date}></input>\n\n    </div>    \n    <button type=\"submit\" className=\"btn btn-outline-dark\" style={this.state.buttonStatus} >Save</button>\n    </form>  \n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}