{"ast":null,"code":"var _jsxFileName = \"/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"; //import { useForm } from \"react-hook-form\";\n//import InputField from '../modular/InputField';\n\nexport default class MachineRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      machienName: \"\",\n      errorMessage: \"\",\n      machineList: {}\n    };\n\n    this.state.checkMachine = () => {\n      try {\n        this.setState({\n          errorMessage: \"\"\n        });\n\n        const showList = (item, index) => {\n          if (this.state.machienName.localeCompare(item.name) == 0) {\n            this.setState({\n              errorMessage: \"* This machine name is already exist!!!\"\n            });\n          } else {}\n        };\n\n        this.state.machineList.forEach(showList);\n      } catch (err) {}\n    };\n\n    const fetchProduct = async () => {\n      console.log(\"Fetch calls\");\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      this.state.machineList = jsonMachineList;\n    };\n\n    fetchProduct();\n\n    this.state.onSubmit = (data, e) => {\n      console.log(\"machine registered successfully\" + this.state.machineName);\n      axios.post('http://127.0.0.1:8000/machine-registration/', {\n        name: this.state.machineName\n      });\n      e.target.reset();\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: this.state.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"machineName\",\n      placeholder: \"Machine Name\",\n      autocomplete: \"off\",\n      onChange: e => {\n        this.state.machienName = e.target.value;\n        this.state.checkMachine();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.errorMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Save\")));\n  }\n\n}\n/*\nexport default function MachineRegistration() {\n  const [machineName, setMachineName] = useState(\"\");\n  const [machineList, setMachineList] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () =>{\n      console.log(\"Fetch calls\");\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      setMachineList(jsonMachineList);\n    }\n  \n    fetchProduct(); \n    \n    function checkMachine() {\n      try {\n        //errors.firstName.message();\n        setErrorMessage(\"\");\n        const showList = (item, index) => {\n          if (machineName === item.name) {\n            setErrorMessage(\"* This machine name is already exist!!!\");\n          }\n          else{}\n        };\n        machineList.forEach(showList);\n      } \n      catch (err) {}\n    }\n\n    useEffect(\n      () => {\n        checkMachine();\n      },\n      [machineList]\n    );\n\n  const { register, errors, handleSubmit, reset } = useForm();\n  \n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\"+machineName);\n    axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n        name: machineName\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        //setMachineList(res);\n      });\n    e.target.reset();\n  };\n  console.log(errors);\n\n  return (\n\t\t\t\t\t\t\t<form className=\"form-container form-group\" onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t\t\t<p className=\"headingViewPart\">Machine Registration</p>\n\t\t\t\t\t\t\t<div className=\"pt-5\">\n              <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => setMachineName(e.target.value)} \n              />\n\t\t\t\t\t\t\t</div>\n              <br/>\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-outline-dark\">Save</button>\n\t\t\t\t\t\t\t</form>      \n  );\n}\n*/\n\n/*\n                <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => userInput(e.target.value)} \n                />\n*/","map":{"version":3,"sources":["/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","useState","useEffect","axios","MachineRegistration","Component","constructor","props","state","machienName","errorMessage","machineList","checkMachine","setState","showList","item","index","localeCompare","name","forEach","err","fetchProduct","console","log","responseMachineList","fetch","jsonMachineList","json","onSubmit","data","e","machineName","post","target","reset","render","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AAGA,eAAe,MAAMC,mBAAN,SAAkCJ,KAAK,CAACK,SAAxC,CAAiD;AAC9DC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAW;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,YAAY,EAAE,EAFL;AAGTC,MAAAA,WAAW,EAAE;AAHJ,KAAX;;AAMA,SAAKH,KAAL,CAAWI,YAAX,GAA0B,MAAM;AAC9B,UAAI;AACF,aAAKC,QAAL,CAAc;AACZH,UAAAA,YAAY,EAAE;AADF,SAAd;;AAGJ,cAAMI,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B,cAAI,KAAKR,KAAL,CAAWC,WAAX,CAAuBQ,aAAvB,CAAqCF,IAAI,CAACG,IAA1C,KAAmD,CAAvD,EAA0D;AACxD,iBAAKL,QAAL,CAAc;AACZH,cAAAA,YAAY,EAAE;AADF,aAAd;AAGD,WAJD,MAKI,CAAE;AACP,SAPL;;AAQI,aAAKF,KAAL,CAAWG,WAAX,CAAuBQ,OAAvB,CAA+BL,QAA/B;AACD,OAbD,CAcA,OAAOM,GAAP,EAAY,CAAE;AACf,KAhBD;;AAkBA,UAAMC,YAAY,GAAG,YAAW;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMC,mBAAmB,GAAG,MAAMC,KAAK,CAAC,yCAAD,CAAvC;AACA,YAAMC,eAAe,GAAG,MAAMF,mBAAmB,CAACG,IAApB,EAA9B;AACA,WAAKnB,KAAL,CAAWG,WAAX,GAAyBe,eAAzB;AACD,KALD;;AAMAL,IAAAA,YAAY;;AAEZ,SAAKb,KAAL,CAAWoB,QAAX,GAAsB,CAACC,IAAD,EAAOC,CAAP,KAAa;AACjCR,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAkC,KAAKf,KAAL,CAAWuB,WAAzD;AACA5B,MAAAA,KAAK,CAAC6B,IAAN,CAAW,6CAAX,EAA0D;AACtDd,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWuB;AADqC,OAA1D;AAGAD,MAAAA,CAAC,CAACG,MAAF,CAASC,KAAT;AACD,KAND;AAOD;;AAEDC,EAAAA,MAAM,GAAE;AACN,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACF;AAAM,MAAA,SAAS,EAAC,2BAAhB;AAA4C,MAAA,QAAQ,EAAE,KAAK3B,KAAL,CAAWoB,QAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AACA,MAAA,IAAI,EAAC,MADL;AAEA,MAAA,SAAS,EAAC,MAFV;AAGA,MAAA,IAAI,EAAC,aAHL;AAIA,MAAA,WAAW,EAAC,cAJZ;AAKA,MAAA,YAAY,EAAC,KALb;AAMA,MAAA,QAAQ,EACNE,CAAC,IAAI;AACL,aAAKtB,KAAL,CAAWC,WAAX,GAAyBqB,CAAC,CAACG,MAAF,CAASG,KAAlC;AACA,aAAK5B,KAAL,CAAWI,YAAX;AACD,OAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,EAcM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKJ,KAAL,CAAWE,YAAf,CAdN,EAeM;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,sBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfN,CADE,CADA;AAqBD;;AAnE6D;AAsEhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n//import { useForm } from \"react-hook-form\";\n//import InputField from '../modular/InputField';\n\n\nexport default class MachineRegistration extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      machienName: \"\",\n      errorMessage: \"\",\n      machineList: {}\n    }\n\n    this.state.checkMachine = () => {\n      try {\n        this.setState({\n          errorMessage :\"\"\n        });\n    const showList = (item, index) => {\n          if (this.state.machienName.localeCompare(item.name) == 0) {\n            this.setState({\n              errorMessage :\"* This machine name is already exist!!!\"\n            });\n          }\n          else{}\n        };\n        this.state.machineList.forEach(showList);\n      } \n      catch (err) {}\n    }\n\n    const fetchProduct = async () =>{\n      console.log(\"Fetch calls\");\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      this.state.machineList = jsonMachineList;\n    }\n    fetchProduct(); \n\n    this.state.onSubmit = (data, e) => {\n      console.log(\"machine registered successfully\"+this.state.machineName);\n      axios.post('http://127.0.0.1:8000/machine-registration/', {\n          name: this.state.machineName\n        });\n      e.target.reset();\n    };\n  }\n  \n  render(){\n    return (\n    <div>\n\t\t<form className=\"form-container form-group\" onSubmit={this.state.onSubmit}>\n        <input \n        type=\"text\" \n        className=\"mb-2\" \n        name=\"machineName\" \n        placeholder=\"Machine Name\" \n        autocomplete=\"off\"\n        onChange={\n          e => {\n          this.state.machienName = e.target.value;\n          this.state.checkMachine();\n        }\n        } \n        />\n        <p>{this.state.errorMessage}</p>     \n        <button type=\"submit\" className=\"btn btn-outline-dark\">Save</button>\n      </form>  \n    </div>   \n    );\n  }\n}\n\n/*\nexport default function MachineRegistration() {\n  const [machineName, setMachineName] = useState(\"\");\n  const [machineList, setMachineList] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () =>{\n      console.log(\"Fetch calls\");\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      setMachineList(jsonMachineList);\n    }\n  \n    fetchProduct(); \n    \n    function checkMachine() {\n      try {\n        //errors.firstName.message();\n        setErrorMessage(\"\");\n        const showList = (item, index) => {\n          if (machineName === item.name) {\n            setErrorMessage(\"* This machine name is already exist!!!\");\n          }\n          else{}\n        };\n        machineList.forEach(showList);\n      } \n      catch (err) {}\n    }\n\n    useEffect(\n      () => {\n        checkMachine();\n      },\n      [machineList]\n    );\n\n  const { register, errors, handleSubmit, reset } = useForm();\n  \n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\"+machineName);\n    axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n        name: machineName\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        //setMachineList(res);\n      });\n    e.target.reset();\n  };\n  console.log(errors);\n\n  return (\n\t\t\t\t\t\t\t<form className=\"form-container form-group\" onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t\t\t<p className=\"headingViewPart\">Machine Registration</p>\n\t\t\t\t\t\t\t<div className=\"pt-5\">\n              <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => setMachineName(e.target.value)} \n              />\n\t\t\t\t\t\t\t</div>\n              <br/>\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-outline-dark\">Save</button>\n\t\t\t\t\t\t\t</form>      \n  );\n}\n*/\n/*\n                <input \n                    type=\"text\" \n                    className=\"mb-2\" \n                    name=\"machineName\" \n                    ref={register({\n                      required: true,\n                      maxLength: 30,\n                      minLength: { value: 5, message: \"Min length is 5\" }\n                    })}\n                    placeholder=\"Machine Name\" \n                    onChange={e => userInput(e.target.value)} \n                />\n*/"]},"metadata":{},"sourceType":"module"}