{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/PartyRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useInput from \"./InputField\";\nimport { useForm } from \"react-hook-form\";\nexport default function PartyRegistration() {\n  const [data, setData] = useState({});\n  const [party, setParty] = useState(\"\");\n  const [name, userName] = useInput({\n    type: \"text\",\n    placeholder: \"name\"\n  });\n  const [contact, userContact] = useInput({\n    type: \"text\",\n    placeholder: \"phone no\"\n  });\n  const [address, userAddress] = useInput({\n    type: \"text\",\n    placeholder: \"Address\"\n  });\n  useEffect(() => {\n    async function fetchProduct() {\n      const response = await fetch(\"http://127.0.0.1:8000/list-of-party/\");\n      const res = await response.json();\n      setData(res);\n    }\n\n    fetchProduct();\n    checkName();\n  }, [name]); // below function is used to check typed machine name is already in database or not\n\n  function checkName() {\n    try {\n      const showList = (item, index) => {\n        console.log(\"Name is = \" + item.name);\n\n        if (name === item.name) {\n          alert(\"Chng machine name\");\n        }\n      };\n\n      data.forEach(showList);\n    } catch (err) {\n      console.log(\"Still loading...\");\n    }\n  } // below function is used to submit the machine registration request\n\n\n  function handleClick() {\n    axios.post(\"http://127.0.0.1:8000/party-registration/\", {\n      name: name,\n      contact: contact,\n      village: address,\n      party_type: party\n    }).then(res => {\n      console.log(res);\n      console.log(res.data);\n      setData(res);\n    });\n  }\n\n  console.log(party);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Party Registration\")), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, userName, userContact, userAddress, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"machineName\",\n    ref: register({\n      required: true,\n      maxLength: 30,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    onChange: e => userInput(e.target.value),\n    placeholder: \"Enter Machine Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), [\"Machine_work\", \"Vehicle_work\", \"Daily_work\", \"Purchase_party\"].map((option, i) => {\n    return React.createElement(\"label\", {\n      key: option,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"radio1\",\n      checked: party === option ? true : false,\n      key: i + 100,\n      onChange: () => setParty(option),\n      value: option,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), option);\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Register\"))));\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/PartyRegistration.js"],"names":["React","useState","useEffect","axios","useInput","useForm","PartyRegistration","data","setData","party","setParty","name","userName","type","placeholder","contact","userContact","address","userAddress","fetchProduct","response","fetch","res","json","checkName","showList","item","index","console","log","alert","forEach","err","handleClick","post","village","party_type","then","register","required","maxLength","minLength","value","message","e","userInput","target","map","option","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useInput from \"./InputField\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function PartyRegistration() {\n  const [data, setData] = useState({});\n\n  const [party, setParty] = useState(\"\");\n\n  const [name, userName] = useInput({ type: \"text\", placeholder: \"name\" });\n  const [contact, userContact] = useInput({\n    type: \"text\",\n    placeholder: \"phone no\"\n  });\n  const [address, userAddress] = useInput({\n    type: \"text\",\n    placeholder: \"Address\"\n  });\n\n  useEffect(() => {\n    async function fetchProduct() {\n      const response = await fetch(\"http://127.0.0.1:8000/list-of-party/\");\n\n      const res = await response.json();\n      setData(res);\n    }\n\n    fetchProduct();\n    checkName();\n  }, [name]);\n\n  // below function is used to check typed machine name is already in database or not\n  function checkName() {\n    try {\n      const showList = (item, index) => {\n        console.log(\"Name is = \" + item.name);\n        if (name === item.name) {\n          alert(\"Chng machine name\");\n        }\n      };\n      data.forEach(showList);\n    } catch (err) {\n      console.log(\"Still loading...\");\n    }\n  }\n\n  // below function is used to submit the machine registration request\n  function handleClick() {\n    axios\n      .post(\"http://127.0.0.1:8000/party-registration/\", {\n        name: name,\n        contact: contact,\n        village: address,\n        party_type: party\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        setData(res);\n      });\n  }\n\n  console.log(party);\n  return (\n    <div>\n      <center>\n        <h2>Party Registration</h2>\n      </center>\n      <hr />\n      <br />\n      <div className=\"\">\n        <form onSubmit={handleClick}>\n          {userName}\n          {userContact}\n          {userAddress}\n          <input\n              type=\"text\"\n              name=\"machineName\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userInput(e.target.value)}\n              placeholder=\"Enter Machine Name\"\n            />\n          {[\"Machine_work\", \"Vehicle_work\", \"Daily_work\", \"Purchase_party\"].map(\n            (option, i) => {\n              return (\n                <label key={option}>\n                  <input\n                    type=\"radio\"\n                    name=\"radio1\"\n                    checked={party === option ? true : false}\n                    key={i + 100}\n                    onChange={() => setParty(option)}\n                    value={option}\n                    required\n                  />\n                  {option}\n                </label>\n              );\n            }\n          )}\n\n          <button>Register</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}