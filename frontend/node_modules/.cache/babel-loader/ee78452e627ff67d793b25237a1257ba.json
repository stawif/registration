{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"./InputPartyNameField\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.myCallbackForSelectedParty = dataFromChild => {\n      this.state.partyName = dataFromChild;\n    };\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    }; // Fetch party list from server\n\n    this.state.fetchProduct = async () => {\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n    };\n\n    this.state.fetchProduct(); // Check existence of party name\n\n    this.state.checkparty = () => {\n      try {\n        console.log(\"asf\");\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    }; //Form Handler\n\n\n    this.state.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n  } //Callback to set Selected Party to state\n\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(InputPartyNameField, {\n      callbackFromParent: this.myCallbackForselectedItem,\n      checkFromParent: this.state.checkparty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"partyContact\",\n      pattern: \"^\\\\d{10}$\",\n      placeholder: \"Enter 10 digit Phone no\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.partyContact = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyVillage\",\n      placeholder: \"Party Village\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyVillage = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","InputPartyNameField","MachinePartyRegistration","Component","constructor","props","myCallbackForSelectedParty","dataFromChild","state","partyName","partyContact","partyVillage","partyList","partyExistMessage","responseMessage","buttonStatus","visibility","fetchProduct","responsePartyList","fetch","jsonPartyList","json","checkparty","console","log","setState","showList","item","index","toLowerCase","name","forEach","err","onSubmit","e","post","contact","village","then","res","data","catch","error","alert","response","request","_response","target","reset","preventDefault","render","myCallbackForselectedItem","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"./InputPartyNameField\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    };\n\n    // Fetch party list from server\n    this.state.fetchProduct = async () => {\n      const responsePartyList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machineparty/\"\n      );\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n    };\n\n    this.state.fetchProduct();\n\n    // Check existence of party name\n    this.state.checkparty = () => {\n      try {\n        console.log(\"asf\");\n        \n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    //Form Handler\n    this.state.onSubmit = e => {\n      axios\n        .post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n          name: this.state.partyName,\n          contact: this.state.partyContact,\n          village: this.state.partyVillage\n        })\n        .then(res => {\n          this.state.fetchProduct();\n          this.setState({\n            responseMessage: res.data\n          });\n        })\n        .catch(error => {\n          alert(error.response.request._response);\n        });\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n  //Callback to set Selected Party to state\n  myCallbackForSelectedParty = dataFromChild => {\n    this.state.partyName = dataFromChild;\n  };\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.state.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          <InputPartyNameField\n          callbackFromParent={this.myCallbackForselectedItem}\n          checkFromParent={this.state.checkparty}\n          />\n\n          <p>{this.state.partyExistMessage}</p>\n          <br />\n\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            name=\"partyContact\"\n            pattern=\"^\\d{10}$\"\n            placeholder=\"Enter 10 digit Phone no\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.partyContact = e.target.value;\n            }}\n            required\n          />\n\n          <br />\n          <br />\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyVillage\"\n            placeholder=\"Party Village\"\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyVillage = e.target.value;\n            }}\n            required\n          />\n        </div>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}