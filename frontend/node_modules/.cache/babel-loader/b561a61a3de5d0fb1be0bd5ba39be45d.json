{"ast":null,"code":"var _jsxFileName = \"/home/cog/Desktop/stawif/registration/frontend/src/components/registration/VehiclePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class VehiclePartyRegistration extends React.Component {\n  // Fetch party list and contact list from server\n  // Check existence of party name\n  // toggle load status\n  constructor(props) {\n    super(props);\n\n    this.fetchProduct = async () => {\n      try {\n        const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-vehicleparty/\");\n        const jsonPartyList = await responsePartyList.json();\n        this.state.partyList = jsonPartyList;\n      } catch {\n        this.toggleLoadStatus();\n      }\n    };\n\n    this.checkVillage = () => {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n    };\n\n    this.checkParty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/vehicle-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {//alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.toggleLoadStatus = async () => {\n      if (this.state.loadingStatus.visibility === \"visible\") {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"hidden\"\n          },\n          loadedStatus: {\n            visibility: \"visible\"\n          }\n        });\n      } else {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"visible\"\n          },\n          loadedStatus: {\n            visibility: \"hidden\"\n          }\n        });\n      }\n    };\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkVillage = this.checkVillage.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Vehicle Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(InputContactField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyContact = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyName\",\n      placeholder: \"Party Name\",\n      value: this.state.partyName,\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyName = e.target.value;\n        this.checkParty();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyVillage\",\n      placeholder: \"Party Village\",\n      value: this.state.partyVillage,\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyVillage = e.target.value;\n        this.checkVillage();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/home/cog/Desktop/stawif/registration/frontend/src/components/registration/VehiclePartyRegistration.js"],"names":["React","axios","InputPartyNameField","InputContactField","InputPartyVillageField","VehiclePartyRegistration","Component","constructor","props","fetchProduct","responsePartyList","fetch","jsonPartyList","json","state","partyList","toggleLoadStatus","checkVillage","setState","partyExistMessage","responseMessage","buttonStatus","visibility","checkParty","showList","item","index","partyName","toLowerCase","name","forEach","err","onSubmit","e","post","contact","partyContact","village","partyVillage","then","res","data","catch","error","target","reset","preventDefault","loadingStatus","loadedStatus","bind","componentDidMount","render","dataFromChild","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\n\nexport default class VehiclePartyRegistration extends React.Component {\n  // Fetch party list and contact list from server\n  fetchProduct = async () => {\n    try {\n      const responsePartyList = await fetch(\n        \"http://127.0.0.1:8000/list-of-vehicleparty/\"\n      );\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n    } catch {\n      this.toggleLoadStatus();\n    }\n  };\n\n  checkVillage = () => {\n    this.setState({\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    });\n  };\n\n  // Check existence of party name\n  checkParty = () => {\n    try {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n      const showList = (item, index) => {\n        if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n          this.setState({\n            partyExistMessage: \"* This party name is already exist!!!\",\n            buttonStatus: {\n              visibility: \"hidden\"\n            }\n          });\n        } else {\n        }\n      };\n      this.state.partyList.forEach(showList);\n    } catch (err) {}\n  };\n\n  onSubmit = e => {\n    axios\n      .post(\"http://127.0.0.1:8000/vehicle-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      })\n      .then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      })\n      .catch(error => {\n        //alert(error.response.request._response);\n      });\n\n    e.target.reset();\n    e.preventDefault();\n  };\n\n  // toggle load status\n  toggleLoadStatus = async () => {\n    if (this.state.loadingStatus.visibility === \"visible\") {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"hidden\"\n        },\n        loadedStatus: {\n          visibility: \"visible\"\n        }\n      });\n    } else {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"visible\"\n        },\n        loadedStatus: {\n          visibility: \"hidden\"\n        }\n      });\n    }\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkVillage = this.checkVillage.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Vehicle Party Registration</p>\n        <div className=\"pt-5\">\n          <InputContactField\n            callbackFromParent={dataFromChild => {\n              this.state.partyContact = dataFromChild;\n              }\n            }\n          />\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyName\"\n            placeholder=\"Party Name\"\n            value={this.state.partyName}\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyName = e.target.value;\n              this.checkParty();\n            }}\n            required\n          />\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyVillage\"\n            placeholder=\"Party Village\"\n            value={this.state.partyVillage}\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyVillage = e.target.value;\n              this.checkVillage();\n            }}\n            required\n          />\n        </div>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}