{"ast":null,"code":"var _jsxFileName = \"/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputCommonName from \"../modular/InputCommonName\";\nexport default class MachineRegistration extends React.Component {\n  // Fetch machine list from server\n  // Check existence of machine name\n  //Form Handler\n  // toggle load status\n  constructor(props) {\n    super(props);\n\n    this.fetchProduct = async () => {\n      const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonMachineList = await responseMachineList.json();\n      this.state.machineList = jsonMachineList;\n    };\n\n    this.checkMachine = () => {\n      try {\n        this.setState({\n          machineExistStatus: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.machineName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              machineExistStatus: \"* This machine name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.machineList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-registration/\", {\n        name: this.state.machineName\n      }).then(res => {\n        this.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {});\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.toggleLoadStatus = async () => {\n      if (this.state.loadingStatus === \"visible\") {\n        console.log(\"Run correct\");\n        await this.setState({\n          loadingStatus: {\n            visibility: \"hidden\"\n          },\n          loadedStatus: {\n            visibility: \"visible\"\n          }\n        });\n      } else {\n        console.log(\"Run incorrect\");\n        await this.setState({\n          loadingStatus: {\n            visibility: \"visible\"\n          },\n          loadedStatus: {\n            visibility: \"hidden\"\n          }\n        });\n      }\n    };\n\n    this.state = {\n      machineName: \"\",\n      machineExistStatus: \"\",\n      machineList: {},\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkMachine = this.checkMachine.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n    console.log(\"constructor\");\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n    console.log(\"component did\");\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: this.state.loadingStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Loading...\"), React.createElement(\"div\", {\n      style: this.state.loadedStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Machine Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(InputCommonName, {\n      minLength: \"5\",\n      placeholderParent: \"Machine Name\",\n      callbackFromParent: dataFromChild => {\n        this.state.machineName = dataFromChild;\n      },\n      checkFromParent: this.checkMachine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, this.state.machineExistStatus), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Save\")));\n  }\n\n}","map":{"version":3,"sources":["/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","axios","InputCommonName","MachineRegistration","Component","constructor","props","fetchProduct","responseMachineList","fetch","jsonMachineList","json","state","machineList","checkMachine","setState","machineExistStatus","responseMessage","buttonStatus","visibility","showList","item","index","machineName","toLowerCase","name","forEach","err","onSubmit","e","post","then","res","data","catch","error","target","reset","preventDefault","toggleLoadStatus","loadingStatus","console","log","loadedStatus","bind","componentDidMount","render","dataFromChild"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputCommonName from \"../modular/InputCommonName\";\n\nexport default class MachineRegistration extends React.Component {\n\n  // Fetch machine list from server\n  fetchProduct = async () => {\n    const responseMachineList = await fetch(\n      \"http://127.0.0.1:8000/list-of-machines/\"\n    );\n    const jsonMachineList = await responseMachineList.json();\n    this.state.machineList = jsonMachineList;\n  };\n\n    // Check existence of machine name\n    checkMachine = () => {\n      try {\n        this.setState({\n          machineExistStatus: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n        const showList = (item, index) => {\n          if (\n            this.state.machineName.toLowerCase() === item.name.toLowerCase()\n          ) {\n            this.setState({\n              machineExistStatus: \"* This machine name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.machineList.forEach(showList);\n      } catch (err) {}\n    };\n    \n    //Form Handler\n    onSubmit = e => {\n      axios\n        .post(\"http://127.0.0.1:8000/machine-registration/\", {\n          name: this.state.machineName\n        })\n        .then(res => {\n          this.fetchProduct();\n          this.setState({\n            responseMessage: res.data\n          });\n        })\n        .catch(error => {});\n      e.target.reset();\n      e.preventDefault();\n    };\n  \n  // toggle load status\n  toggleLoadStatus = async () =>{\n    if(this.state.loadingStatus === \"visible\"){\n      console.log(\"Run correct\");\n      await this.setState({\n        loadingStatus: {\n          visibility: \"hidden\"\n        },\n        loadedStatus: {\n          visibility: \"visible\"\n        }\n      });\n    }\n    else{\n      console.log(\"Run incorrect\");\n      await this.setState({\n        loadingStatus: {\n          visibility: \"visible\"\n        },\n        loadedStatus: {\n          visibility: \"hidden\"\n        }\n      });\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      machineName: \"\",\n      machineExistStatus: \"\",\n      machineList: {},\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n};\n    \n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkMachine = this.checkMachine.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n    console.log(\"constructor\");\n  }\n\n  componentDidMount(){\n    this.toggleLoadStatus();\n    console.log(\"component did\");\n  }\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.onSubmit(e)}\n      >\n        <h3 style={this.state.loadingStatus}>Loading...</h3>\n        <div style={this.state.loadedStatus}>  \n        <p className=\"headingViewPart\">Machine Registration</p>\n        <div className=\"pt-5\">\n          <InputCommonName\n            minLength={\"5\"}\n            placeholderParent={\"Machine Name\"}\n            callbackFromParent={dataFromChild => {\n              this.state.machineName = dataFromChild;\n            }}\n            checkFromParent={this.checkMachine}\n          />\n        </div>\n        <p>{this.state.machineExistStatus}</p>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n        </div>    \n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}