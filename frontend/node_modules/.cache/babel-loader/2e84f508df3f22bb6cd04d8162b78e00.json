{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Autocomplete from \"./AutoComplete.jsx\";\nimport AutoSuggestion from './AutoSuggestion'; //import Autosuggest from \"react-autosuggest\";\n// Imagine you have a list of languages that you'd like to autosuggest.\n\nconst languages = [];\nfetch(\"http://127.0.0.1:8000/list-of-machineparty/\").then(res => res.json()).then(out => {\n  console.log(\"ashok\", out);\n  ashok(out);\n}).catch(err => {\n  throw err;\n}); //below function is used to store api data in a array\n\nfunction ashok(data) {\n  data.map(item => languages.push(item));\n  console.log(\"langu\", languages);\n}\n\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: null,\n      partyList: [],\n      machineList: [],\n      selectedMachine: null,\n      selectedParty: null,\n      partyExistMessage: [],\n      //   value: \"\",\n      //   suggestions: [],\n      remark: null,\n      dieselamount: null,\n      drillingFeet: null,\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      radioButtonStyle: {\n        float: \"left\"\n      }\n    }; // Fetch party list from server\n\n    this.state.fetchProduct = async () => {\n      const responsepartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonpartyList = await responsepartyList.json();\n      this.state.partyList = jsonpartyList;\n      const responsemachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonmachineList = await responsemachineList.json();\n      this.state.machineList = jsonmachineList;\n    };\n\n    this.state.fetchProduct(); // Check existence of party name\n\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: [],\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        }); // this.state.partyExistMessage = [];\n\n        const showList = (item, index) => {\n          if (item.name.toLowerCase().startsWith(this.state.partyName.toLowerCase())) {\n            this.state.partyExistMessage.push(item.name.toLowerCase()); //this.state.partyExistMessage=item.name.toLowerCase();\n\n            this.setState({\n              partyExistMessage: this.state.partyExistMessage,\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      //   axios\n      //     .post(\"\", {\n      //       name: this.state.partyName,\n      //       contact: this.state.partyContact,\n      //       village: this.state.partyVillage\n      //     })\n      //     .then(res => {\n      //       this.state.fetchProduct();\n      //     })\n      //     .catch(error => {\n      //       alert(error.response.request._response);\n      //     });\n      console.log(this.state.date);\n      console.log(this.state.dieselamount);\n      console.log(this.state.drillingFeet);\n      console.log(this.state.remark);\n      console.log(this.state.selectedParty);\n      console.log(this.state.selectedMachine);\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.state.getDate = () => {\n      // var date = { currentTime: new Date().toLocaleString() }\n      var curr = new Date();\n      curr.setDate(curr.getDate() + 3);\n      var date = curr.toISOString().substr(0, 10);\n      this.state.date = date;\n    };\n\n    this.state.getDate();\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: \"Type a programming language\",\n      value,\n      onChange: this.onChange\n    };\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      suggestions: languages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"date\" //data-date=\"\"\n      ,\n      \"data-date-format\": \"YYYY-MM-DD\",\n      defaultValue: this.state.date,\n      name: \"date\",\n      onChange: e => {\n        this.state.date = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"remark\",\n      placeholder: \"Remark\",\n      autoComplete: \"off\",\n      maxLength: \"30\" //minLength=\"5\"\n      ,\n      onChange: e => {\n        this.state.remark = e.target.value;\n      } //required\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"dieselAmount\",\n      placeholder: \"Diesel Amount\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.dieselamount = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"drillingFeet\",\n      placeholder: \"Drilling Feet\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.drillingFeet = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(AutoSuggestion, {\n      suggestions: languages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js"],"names":["React","axios","Autocomplete","AutoSuggestion","languages","fetch","then","res","json","out","console","log","ashok","catch","err","data","map","item","push","MachinePartyRegistration","Component","constructor","props","state","date","partyList","machineList","selectedMachine","selectedParty","partyExistMessage","remark","dieselamount","drillingFeet","buttonStatus","visibility","radioButtonStyle","float","fetchProduct","responsepartyList","jsonpartyList","responsemachineList","jsonmachineList","checkparty","setState","showList","index","name","toLowerCase","startsWith","partyName","forEach","onSubmit","e","target","reset","preventDefault","getDate","curr","Date","setDate","toISOString","substr","render","value","suggestions","inputProps","placeholder","onChange"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;AAEA;;AAEA,MAAMC,SAAS,GAAG,EAAlB;AAEAC,KAAK,CAAC,6CAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,GAAG,IAAI;AACXC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AAEAG,EAAAA,KAAK,CAACH,GAAD,CAAL;AACD,CANH,EAOGI,KAPH,CAOSC,GAAG,IAAI;AACZ,QAAMA,GAAN;AACD,CATH,E,CAUA;;AACA,SAASF,KAAT,CAAeG,IAAf,EAAqB;AACnBA,EAAAA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAIb,SAAS,CAACc,IAAV,CAAeD,IAAf,CAAjB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,SAArB;AACD;;AAED,eAAe,MAAMe,wBAAN,SAAuCnB,KAAK,CAACoB,SAA7C,CAAuD;AACpEC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,IADK;AAGXC,MAAAA,SAAS,EAAE,EAHA;AAIXC,MAAAA,WAAW,EAAE,EAJF;AAMXC,MAAAA,eAAe,EAAE,IANN;AAOXC,MAAAA,aAAa,EAAE,IAPJ;AASXC,MAAAA,iBAAiB,EAAE,EATR;AAWX;AACA;AAEAC,MAAAA,MAAM,EAAE,IAdG;AAeXC,MAAAA,YAAY,EAAE,IAfH;AAgBXC,MAAAA,YAAY,EAAE,IAhBH;AAkBXC,MAAAA,YAAY,EAAE;AACZC,QAAAA,UAAU,EAAE;AADA,OAlBH;AAqBXC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,KAAK,EAAE;AADS;AArBP,KAAb,CAHiB,CA6BjB;;AACA,SAAKb,KAAL,CAAWc,YAAX,GAA0B,YAAY;AACpC,YAAMC,iBAAiB,GAAG,MAAMjC,KAAK,CACnC,6CADmC,CAArC;AAGA,YAAMkC,aAAa,GAAG,MAAMD,iBAAiB,CAAC9B,IAAlB,EAA5B;AACA,WAAKe,KAAL,CAAWE,SAAX,GAAuBc,aAAvB;AAEA,YAAMC,mBAAmB,GAAG,MAAMnC,KAAK,CACrC,yCADqC,CAAvC;AAGA,YAAMoC,eAAe,GAAG,MAAMD,mBAAmB,CAAChC,IAApB,EAA9B;AACA,WAAKe,KAAL,CAAWG,WAAX,GAAyBe,eAAzB;AACD,KAZD;;AAcA,SAAKlB,KAAL,CAAWc,YAAX,GA5CiB,CA8CjB;;AACA,SAAKd,KAAL,CAAWmB,UAAX,GAAwB,MAAM;AAC5B,UAAI;AACF,aAAKC,QAAL,CAAc;AACZd,UAAAA,iBAAiB,EAAE,EADP;AAEZI,UAAAA,YAAY,EAAE;AACZC,YAAAA,UAAU,EAAE;AADA;AAFF,SAAd,EADE,CAQF;;AACA,cAAMU,QAAQ,GAAG,CAAC3B,IAAD,EAAO4B,KAAP,KAAiB;AAChC,cACE5B,IAAI,CAAC6B,IAAL,CACGC,WADH,GAEGC,UAFH,CAEc,KAAKzB,KAAL,CAAW0B,SAAX,CAAqBF,WAArB,EAFd,CADF,EAIE;AACA,iBAAKxB,KAAL,CAAWM,iBAAX,CAA6BX,IAA7B,CAAkCD,IAAI,CAAC6B,IAAL,CAAUC,WAAV,EAAlC,EADA,CAEA;;AAEA,iBAAKJ,QAAL,CAAc;AACZd,cAAAA,iBAAiB,EAAE,KAAKN,KAAL,CAAWM,iBADlB;AAEZI,cAAAA,YAAY,EAAE;AACZC,gBAAAA,UAAU,EAAE;AADA;AAFF,aAAd;AAMD,WAdD,MAcO,CACN;AACF,SAjBD;;AAkBA,aAAKX,KAAL,CAAWE,SAAX,CAAqByB,OAArB,CAA6BN,QAA7B;AACD,OA5BD,CA4BE,OAAO9B,GAAP,EAAY,CAAE;AACjB,KA9BD;;AAgCA,SAAKS,KAAL,CAAW4B,QAAX,GAAsBC,CAAC,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1C,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,KAAL,CAAWC,IAAvB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,KAAL,CAAWQ,YAAvB;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,KAAL,CAAWS,YAAvB;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,KAAL,CAAWO,MAAvB;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,KAAL,CAAWK,aAAvB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,KAAL,CAAWI,eAAvB;AAEAyB,MAAAA,CAAC,CAACC,MAAF,CAASC,KAAT;AACAF,MAAAA,CAAC,CAACG,cAAF;AACD,KAtBD;;AAwBA,SAAKhC,KAAL,CAAWiC,OAAX,GAAqB,MAAM;AACzB;AACA,UAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACD,OAAL,KAAiB,CAA9B;AACA,UAAIhC,IAAI,GAAGiC,IAAI,CAACG,WAAL,GAAmBC,MAAnB,CAA0B,CAA1B,EAA6B,EAA7B,CAAX;AACA,WAAKtC,KAAL,CAAWC,IAAX,GAAkBA,IAAlB;AACD,KAND;;AAQA,SAAKD,KAAL,CAAWiC,OAAX;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKzC,KAApC,CADO,CAGP;;AACA,UAAM0C,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,6BADI;AAEjBH,MAAAA,KAFiB;AAGjBI,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB;AAMA,WACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,QAAQ,EAAEf,CAAC,IAAI,KAAK7B,KAAL,CAAW4B,QAAX,CAAoBC,CAApB,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJF,EAKE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAsBE,oBAAC,YAAD;AAAc,MAAA,WAAW,EAAEhD,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBF,EAwBE;AACE,MAAA,IAAI,EAAC,MADP,CAEE;AAFF;AAGE,0BAAiB,YAHnB;AAIE,MAAA,YAAY,EAAE,KAAKmB,KAAL,CAAWC,IAJ3B;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,QAAQ,EAAE4B,CAAC,IAAI;AACb,aAAK7B,KAAL,CAAWC,IAAX,GAAkB4B,CAAC,CAACC,MAAF,CAASU,KAA3B;AACD,OARH;AASE,MAAA,QAAQ,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,EAmCE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,WAAW,EAAC,QAJd;AAKE,MAAA,YAAY,EAAC,KALf;AAME,MAAA,SAAS,EAAC,IANZ,CAOE;AAPF;AAQE,MAAA,QAAQ,EAAEX,CAAC,IAAI;AACb,aAAK7B,KAAL,CAAWO,MAAX,GAAoBsB,CAAC,CAACC,MAAF,CAASU,KAA7B;AACD,OAVH,CAWE;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCF,EAgDE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,IAAI,EAAC,cAHP;AAIE,MAAA,WAAW,EAAC,eAJd;AAKE,MAAA,YAAY,EAAC,KALf;AAME,MAAA,QAAQ,EAAEX,CAAC,IAAI;AACb,aAAK7B,KAAL,CAAWQ,YAAX,GAA0BqB,CAAC,CAACC,MAAF,CAASU,KAAnC;AACD,OARH;AASE,MAAA,QAAQ,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhDF,EA2DE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,IAAI,EAAC,cAHP;AAIE,MAAA,WAAW,EAAC,eAJd;AAKE,MAAA,YAAY,EAAC,KALf;AAME,MAAA,QAAQ,EAAEX,CAAC,IAAI;AACb,aAAK7B,KAAL,CAAWS,YAAX,GAA0BoB,CAAC,CAACC,MAAF,CAASU,KAAnC;AACD,OARH;AASE,MAAA,QAAQ,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3DF,EAsEE,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAE3D,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtEF,CALF,EA6EE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,sBAFZ;AAGE,MAAA,KAAK,EAAE,KAAKmB,KAAL,CAAWU,YAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7EF,CADF;AAuFD;;AApNmE","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Autocomplete from \"./AutoComplete.jsx\";\nimport AutoSuggestion from './AutoSuggestion'\n//import Autosuggest from \"react-autosuggest\";\n\n// Imagine you have a list of languages that you'd like to autosuggest.\n\nconst languages = [];\n\nfetch(\"http://127.0.0.1:8000/list-of-machineparty/\")\n  .then(res => res.json())\n  .then(out => {\n    console.log(\"ashok\", out);\n\n    ashok(out);\n  })\n  .catch(err => {\n    throw err;\n  });\n//below function is used to store api data in a array\nfunction ashok(data) {\n  data.map(item => languages.push(item));\n  console.log(\"langu\", languages);\n}\n\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: null,\n\n      partyList: [],\n      machineList: [],\n\n      selectedMachine: null,\n      selectedParty: null,\n\n      partyExistMessage: [],\n\n      //   value: \"\",\n      //   suggestions: [],\n\n      remark: null,\n      dieselamount: null,\n      drillingFeet: null,\n\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      radioButtonStyle: {\n        float: \"left\"\n      }\n    };\n\n    // Fetch party list from server\n    this.state.fetchProduct = async () => {\n      const responsepartyList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machineparty/\"\n      );\n      const jsonpartyList = await responsepartyList.json();\n      this.state.partyList = jsonpartyList;\n\n      const responsemachineList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machines/\"\n      );\n      const jsonmachineList = await responsemachineList.json();\n      this.state.machineList = jsonmachineList;\n    };\n\n    this.state.fetchProduct();\n\n    // Check existence of party name\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: [],\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        // this.state.partyExistMessage = [];\n        const showList = (item, index) => {\n          if (\n            item.name\n              .toLowerCase()\n              .startsWith(this.state.partyName.toLowerCase())\n          ) {\n            this.state.partyExistMessage.push(item.name.toLowerCase());\n            //this.state.partyExistMessage=item.name.toLowerCase();\n\n            this.setState({\n              partyExistMessage: this.state.partyExistMessage,\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      //   axios\n      //     .post(\"\", {\n      //       name: this.state.partyName,\n      //       contact: this.state.partyContact,\n      //       village: this.state.partyVillage\n      //     })\n      //     .then(res => {\n      //       this.state.fetchProduct();\n      //     })\n      //     .catch(error => {\n      //       alert(error.response.request._response);\n      //     });\n      console.log(this.state.date);\n      console.log(this.state.dieselamount);\n      console.log(this.state.drillingFeet);\n      console.log(this.state.remark);\n      console.log(this.state.selectedParty);\n      console.log(this.state.selectedMachine);\n\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.state.getDate = () => {\n      // var date = { currentTime: new Date().toLocaleString() }\n      var curr = new Date();\n      curr.setDate(curr.getDate() + 3);\n      var date = curr.toISOString().substr(0, 10);\n      this.state.date = date;\n    };\n\n    this.state.getDate();\n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Type a programming language\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.state.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          {/* <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyName\"\n            placeholder=\"Party Name\"\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyName = e.target.value;\n              this.state.checkparty();\n            }}\n            required\n          /> */}\n\n          {/* <div>\n            {this.state.partyExistMessage.map(v => (\n              <p key={v}>{v}</p>\n            ))}\n          </div> */}\n          {/* <Autocomplete suggestions={languages} /> */}\n          <Autocomplete suggestions={languages} />\n\n          <input\n            type=\"date\"\n            //data-date=\"\"\n            data-date-format=\"YYYY-MM-DD\"\n            defaultValue={this.state.date}\n            name=\"date\"\n            onChange={e => {\n              this.state.date = e.target.value;\n            }}\n            required\n          ></input>\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"remark\"\n            placeholder=\"Remark\"\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            //minLength=\"5\"\n            onChange={e => {\n              this.state.remark = e.target.value;\n            }}\n            //required\n          />\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            name=\"dieselAmount\"\n            placeholder=\"Diesel Amount\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.dieselamount = e.target.value;\n            }}\n            required\n          />\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            name=\"drillingFeet\"\n            placeholder=\"Drilling Feet\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.drillingFeet = e.target.value;\n            }}\n            required\n          />\n          <AutoSuggestion suggestions={languages}/>\n        </div>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}