{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/MachineRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nexport default function MachineRegistration() {\n  const [data, setData] = useState({});\n  const [machinename, userInput] = useState(\"\");\n  useEffect(() => {\n    async function fetchProduct() {\n      const response = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const res = await response.json();\n      setData(res);\n    }\n\n    fetchProduct();\n    checkMachine();\n  }, [machinename]); //console.log(machinename);\n  // below function is used to check typed machine name is already in database or not\n\n  function checkMachine(e) {\n    try {\n      //errors.firstName.message();\n      const showList = (item, index) => {\n        if (machinename === item.name) {\n          alert(\"please enter different machine name\");\n          e.target.reset();\n        }\n      };\n\n      data.forEach(showList);\n    } catch (err) {}\n  }\n\n  console.log(machinename);\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm();\n\n  const onSubmit = (data, e) => {\n    alert(JSON.stringify(data));\n    axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n      name: machinename\n    }).then(res => {\n      console.log(res);\n      console.log(res.data);\n      setData(res);\n    });\n    e.target.reset();\n  };\n\n  console.log(errors);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Machine Registration\")), React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"firstName\",\n    ref: register({\n      required: true,\n      maxLength: 80,\n      minLength: {\n        value: 5,\n        message: \"Min length is 5\"\n      }\n    }),\n    onChange: e => userInput(e.target.value),\n    placeholder: \"Enter Machine Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), errors.firstName && errors.firstName.message, React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, Object.keys(errors).length > 0 && errors.firstName.message)), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","useState","useEffect","axios","useForm","MachineRegistration","data","setData","machinename","userInput","fetchProduct","response","fetch","res","json","checkMachine","e","showList","item","index","name","alert","target","reset","forEach","err","console","log","register","errors","handleSubmit","onSubmit","JSON","stringify","post","then","required","maxLength","minLength","value","message","firstName","color","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function MachineRegistration() {\n  const [data, setData] = useState({});\n  const [machinename, userInput] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchProduct() {\n      const response = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n\n      const res = await response.json();\n      setData(res);\n    }\n\n    fetchProduct();\n    checkMachine();\n  }, [machinename]);\n\n  //console.log(machinename);\n\n  // below function is used to check typed machine name is already in database or not\n  function checkMachine(e) {\n    try {\n      //errors.firstName.message();\n      const showList = (item, index) => {\n        if (machinename === item.name) {\n          alert(\"please enter different machine name\");\n          e.target.reset()\n        }\n      };\n      data.forEach(showList);\n    } catch (err) {}\n  }\n  console.log(machinename);\n\n  const { register, errors, handleSubmit, reset } = useForm();\n  const onSubmit = (data, e) => {\n    alert(JSON.stringify(data));\n    axios\n      .post(`http://127.0.0.1:8000/machine-registration/`, {\n        name: machinename\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        setData(res);\n      });\n    e.target.reset();\n  };\n  console.log(errors);\n\n  return (\n    <div>\n      <center>\n        <h2>Machine Registration</h2>\n      </center>\n      <div className=\"\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div>\n            <input\n              type=\"text\"\n              name=\"firstName\"\n              ref={register({\n                required: true,\n                maxLength: 80,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userInput(e.target.value)}\n              placeholder=\"Enter Machine Name\"\n            />\n            {errors.firstName && errors.firstName.message}\n            <div style={{ color: 'red' }}>\n          {Object.keys(errors).length > 0 &&\n            errors.firstName.message}\n            </div>\n          </div>\n\n          <input type=\"submit\" />\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}