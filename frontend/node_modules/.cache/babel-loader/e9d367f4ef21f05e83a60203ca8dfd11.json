{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Autocomplete from \"./AutoComplete.jsx\";\nimport Autosuggest from 'react-autosuggest'; // Imagine you have a list of languages that you'd like to autosuggest.\n\nfetch('https://api.mydomain.com').then(response => response.json()).then(data => data);\nconst languages = [{\n  name: 'C',\n  year: 1972\n}, {\n  name: 'Elm',\n  year: 2012\n}];\nconsole.log(data + \"sdf\"); // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, suggestion.name);\n\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      date: null,\n      partyList: [],\n      machineList: [],\n      selectedMachine: null,\n      selectedParty: null,\n      partyExistMessage: [],\n      value: '',\n      suggestions: [],\n      remark: null,\n      dieselamount: null,\n      drillingFeet: null,\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      radioButtonStyle: {\n        float: \"left\"\n      }\n    }; // Fetch party list from server\n\n    this.state.fetchProduct = async () => {\n      const responsepartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonpartyList = await responsepartyList.json();\n      this.state.partyList = jsonpartyList;\n      const responsemachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n      const jsonmachineList = await responsemachineList.json();\n      this.state.machineList = jsonmachineList;\n    };\n\n    this.state.fetchProduct(); // Check existence of party name\n\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: [],\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        }); // this.state.partyExistMessage = [];\n\n        const showList = (item, index) => {\n          if (item.name.toLowerCase().startsWith(this.state.partyName.toLowerCase())) {\n            this.state.partyExistMessage.push(item.name.toLowerCase()); //this.state.partyExistMessage=item.name.toLowerCase();\n\n            this.setState({\n              partyExistMessage: this.state.partyExistMessage,\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      //   axios\n      //     .post(\"\", {\n      //       name: this.state.partyName,\n      //       contact: this.state.partyContact,\n      //       village: this.state.partyVillage\n      //     })\n      //     .then(res => {\n      //       this.state.fetchProduct();\n      //     })\n      //     .catch(error => {\n      //       alert(error.response.request._response);\n      //     });\n      console.log(this.state.date);\n      console.log(this.state.dieselamount);\n      console.log(this.state.drillingFeet);\n      console.log(this.state.remark);\n      console.log(this.state.selectedParty);\n      console.log(this.state.selectedMachine);\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.state.getDate = () => {\n      // var date = { currentTime: new Date().toLocaleString() }\n      var curr = new Date();\n      curr.setDate(curr.getDate() + 3);\n      var date = curr.toISOString().substr(0, 10);\n      this.state.date = date;\n    };\n\n    this.state.getDate();\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    };\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyName\",\n      placeholder: \"Party Name\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyName = e.target.value;\n        this.state.checkparty();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, this.state.partyExistMessage.map(v => React.createElement(\"p\", {\n      key: v,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, v))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"date\" //data-date=\"\"\n      ,\n      \"data-date-format\": \"YYYY-MM-DD\",\n      defaultValue: this.state.date,\n      name: \"date\",\n      onChange: e => {\n        this.state.date = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"remark\",\n      placeholder: \"Remark\",\n      autoComplete: \"off\",\n      maxLength: \"30\" //minLength=\"5\"\n      ,\n      onChange: e => {\n        this.state.remark = e.target.value;\n      } //required\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"dieselAmount\",\n      placeholder: \"Diesel Amount\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.dieselamount = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"drillingFeet\",\n      placeholder: \"Drilling Feet\",\n      autoComplete: \"off\",\n      onChange: e => {\n        this.state.drillingFeet = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(Autocomplete, {\n      suggestions: this.state.partyList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/entry/MachineWorkEntry.js"],"names":["React","axios","Autocomplete","Autosuggest","fetch","then","response","json","data","languages","name","year","console","log","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","MachinePartyRegistration","Component","constructor","props","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","date","partyList","machineList","selectedMachine","selectedParty","partyExistMessage","remark","dieselamount","drillingFeet","buttonStatus","visibility","radioButtonStyle","float","fetchProduct","responsepartyList","jsonpartyList","responsemachineList","jsonmachineList","checkparty","showList","item","index","startsWith","partyName","push","forEach","err","onSubmit","e","target","reset","preventDefault","getDate","curr","Date","setDate","toISOString","substr","render","inputProps","placeholder","map","v"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Autocomplete from \"./AutoComplete.jsx\";\n\nimport Autosuggest from 'react-autosuggest';\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nfetch('https://api.mydomain.com')\n      .then(response => response.json())\n      .then(data => data);\n\nconst languages = [\n  {\n    name: 'C',\n    year: 1972\n  },\n  {\n    name: 'Elm',\n    year: 2012\n  }\n];\nconsole.log(data+\"sdf\")\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : languages.filter(lang =>\n    lang.name.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div>\n    {suggestion.name}\n  </div>\n);\n\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: null,\n\n      partyList: [],\n      machineList: [],\n\n      selectedMachine: null,\n      selectedParty: null,\n\n      partyExistMessage: [],\n\n      value: '',\n      suggestions: [],\n\n      remark: null,\n      dieselamount: null,\n      drillingFeet: null,\n\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      radioButtonStyle: {\n        float: \"left\"\n      }\n    };\n\n    // Fetch party list from server\n    this.state.fetchProduct = async () => {\n      const responsepartyList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machineparty/\"\n      );\n      const jsonpartyList = await responsepartyList.json();\n      this.state.partyList = jsonpartyList;\n\n      const responsemachineList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machines/\"\n      );\n      const jsonmachineList = await responsemachineList.json();\n      this.state.machineList = jsonmachineList;\n    };\n\n    this.state.fetchProduct();\n\n    // Check existence of party name\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: [],\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        // this.state.partyExistMessage = [];\n        const showList = (item, index) => {\n          if (\n            item.name\n              .toLowerCase()\n              .startsWith(this.state.partyName.toLowerCase())\n          ) {\n            this.state.partyExistMessage.push(item.name.toLowerCase());\n            //this.state.partyExistMessage=item.name.toLowerCase();\n\n            this.setState({\n              partyExistMessage: this.state.partyExistMessage,\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {\n          }\n        };\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      //   axios\n      //     .post(\"\", {\n      //       name: this.state.partyName,\n      //       contact: this.state.partyContact,\n      //       village: this.state.partyVillage\n      //     })\n      //     .then(res => {\n      //       this.state.fetchProduct();\n      //     })\n      //     .catch(error => {\n      //       alert(error.response.request._response);\n      //     });\n      console.log(this.state.date);\n      console.log(this.state.dieselamount);\n      console.log(this.state.drillingFeet);\n      console.log(this.state.remark);\n      console.log(this.state.selectedParty);\n      console.log(this.state.selectedMachine);\n\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.state.getDate = () => {\n      // var date = { currentTime: new Date().toLocaleString() }\n      var curr = new Date();\n      curr.setDate(curr.getDate() + 3);\n      var date = curr.toISOString().substr(0, 10);\n      this.state.date = date;\n    };\n\n    this.state.getDate();\n  }\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n\n\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.state.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyName\"\n            placeholder=\"Party Name\"\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyName = e.target.value;\n              this.state.checkparty();\n            }}\n            required\n          />\n\n          {/* <p>{this.state.partyExistMessage}</p> */}\n          <div>\n            {this.state.partyExistMessage.map(v => (\n              <p key={v}>{v}</p>\n            ))}\n          </div>\n          <br />\n\n          <input\n            type=\"date\"\n            //data-date=\"\"\n            data-date-format=\"YYYY-MM-DD\"\n            defaultValue={this.state.date}\n            name=\"date\"\n            onChange={e => {\n              this.state.date = e.target.value;\n            }}\n            required\n          ></input>\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"remark\"\n            placeholder=\"Remark\"\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            //minLength=\"5\"\n            onChange={e => {\n              this.state.remark = e.target.value;\n            }}\n            //required\n          />\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            name=\"dieselAmount\"\n            placeholder=\"Diesel Amount\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.dieselamount = e.target.value;\n            }}\n            required\n          />\n          <input\n            type=\"number\"\n            className=\"mb-2\"\n            name=\"drillingFeet\"\n            placeholder=\"Drilling Feet\"\n            autoComplete=\"off\"\n            onChange={e => {\n              this.state.drillingFeet = e.target.value;\n            }}\n            required\n          />\n          <Autocomplete suggestions={this.state.partyList} />\n          <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}