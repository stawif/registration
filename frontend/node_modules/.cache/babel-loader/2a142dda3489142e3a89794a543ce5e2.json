{"ast":null,"code":"var _jsxFileName = \"E:\\\\registration\\\\frontend\\\\src\\\\components\\\\registration\\\\MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: 'visible'\n      }\n    }; // Fetch party list and contact list from server\n\n    this.state.fetchProduct = async () => {\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n      const responseContactList = await fetch(\"http://127.0.0.1:8000/list-of-partycontacts/\");\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n    };\n\n    this.state.fetchProduct(); // Take name and village from contact\n\n    this.state.getNameVillage = matchContact => {\n      axios.post('http://127.0.0.1:8000/party-through-contact/', {\n        contact: matchContact\n      }).then(res => {\n        const jsonNameVillage = JSON.parse(res.data);\n        console.log(\"Name \", jsonNameVillage.name);\n        console.log(\"Village \", jsonNameVillage.village);\n      }).catch(error => {\n        console.log(error.response.request._response);\n      });\n    }; // Check existence of party name \n\n\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: 'visible'\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: 'hidden'\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      axios.post('http://127.0.0.1:8000/machine-party-registration/', {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyName\",\n      placeholder: \"Party Name\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyName = e.target.value;\n        this.state.checkparty();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"partyContact\",\n      placeholder: \"Party Contact\",\n      autoComplete: \"off\",\n      maxLength: \"10\",\n      minLength: \"10\",\n      onChange: e => {\n        this.state.partyContact = e.target.value;\n\n        if (e.target.value.length === 10) {\n          if (this.state.partyContacts.indexOf(e.target.value) > -1) {\n            this.state.getNameVillage(e.target.value);\n          }\n        }\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyVillage\",\n      placeholder: \"Party Village\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyVillage = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["E:/registration/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","MachinePartyRegistration","Component","constructor","props","state","partyName","partyContact","partyVillage","partyList","partyExistMessage","responseMessage","partyContacts","buttonStatus","visibility","fetchProduct","responsePartyList","fetch","jsonPartyList","json","responseContactList","jsonContactList","getNameVillage","matchContact","post","contact","then","res","jsonNameVillage","JSON","parse","data","console","log","name","village","catch","error","response","request","_response","checkparty","setState","showList","item","index","toLowerCase","forEach","err","onSubmit","e","alert","target","reset","preventDefault","render","value","length","indexOf"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class MachinePartyRegistration extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n      partyName: \"\",\r\n      partyContact: \"\",\r\n      partyVillage: \"\",\r\n      partyList: {},\r\n      partyExistMessage: \"\",\r\n      responseMessage: \"\",\r\n      partyContacts: \"\",\r\n      buttonStatus: {\r\n          visibility: 'visible'\r\n      }\r\n    }\r\n\r\n    // Fetch party list and contact list from server\r\n    this.state.fetchProduct = async () =>{\r\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\r\n      const jsonPartyList = await responsePartyList.json();\r\n      this.state.partyList = jsonPartyList;\r\n      const responseContactList = await fetch(\r\n        \"http://127.0.0.1:8000/list-of-partycontacts/\"\r\n      );\r\n      const jsonContactList = await responseContactList.json();\r\n      this.state.partyContacts = jsonContactList;\r\n    }\r\n    \r\n    \r\n    this.state.fetchProduct(); \r\n\r\n    // Take name and village from contact\r\n    this.state.getNameVillage = (matchContact) => {\r\n      axios.post('http://127.0.0.1:8000/party-through-contact/', \r\n      {\r\n        contact: matchContact\r\n      }\r\n      ).then(res => {\r\n        const jsonNameVillage= JSON.parse(res.data)\r\n        console.log(\"Name \",jsonNameVillage.name)\r\n        console.log(\"Village \",jsonNameVillage.village)\r\n      }\r\n      ).catch(error => {\r\n        console.log( error.response.request._response )\r\n      });\r\n    }    \r\n\r\n    // Check existence of party name \r\n    this.state.checkparty = () => {\r\n      try {\r\n        this.setState({\r\n             partyExistMessage :\"\",\r\n             responseMessage: \"\",\r\n             buttonStatus: {\r\n                 visibility: 'visible'           \r\n             }\r\n            });\r\n        const showList = (item, index) => {\r\n            if (this.state.partyName.toLowerCase() === item.name.toLowerCase()){\r\n              this.setState({\r\n                 partyExistMessage :\"* This party name is already exist!!!\",\r\n                    buttonStatus: {\r\n                  visibility: 'hidden'                 \r\n                 }\r\n              });\r\n            }\r\n            else{}\r\n        };\r\n        this.state.partyList.forEach(showList);\r\n      } \r\n      catch (err) {}\r\n    }\r\n\r\n    this.state.onSubmit =(e) => {\r\n        axios.post('http://127.0.0.1:8000/machine-party-registration/', \r\n        {\r\n          name: this.state.partyName,\r\n          contact: this.state.partyContact,\r\n          village: this.state.partyVillage\r\n        }\r\n        ).then(res => {\r\n          this.state.fetchProduct();\r\n          this.setState({\r\n            responseMessage: res.data\r\n          });         \r\n        }\r\n        ).catch(error => {\r\n          alert( error.response.request._response )\r\n        });\r\n      e.target.reset();\r\n      e.preventDefault();\r\n    };\r\n  \r\n  }\r\n \r\n  render(){\r\n    return (\r\n\t\t<form className=\"form-container form-group\" onSubmit={ e => this.state.onSubmit(e) }>\r\n         <p className=\"headingViewPart\">Machine Party Registration</p>\r\n\t\t<div className=\"pt-5\">\r\n\r\n        <input \r\n            type=\"text\" \r\n            className=\"mb-2\" \r\n            name=\"partyName\" \r\n            placeholder=\"Party Name\" \r\n            autoComplete=\"off\"\r\n            maxLength = \"30\"\r\n            minLength = \"5\"\r\n            onChange={\r\n                e => {\r\n                    this.state.partyName = e.target.value;\r\n                    this.state.checkparty();\r\n                }\r\n            } \r\n            required\r\n        />\r\n        \r\n        <p>{this.state.partyExistMessage}</p>\r\n        <br/>  \r\n\r\n        <input \r\n            type=\"number\" \r\n            className=\"mb-2\" \r\n            name=\"partyContact\" \r\n            placeholder=\"Party Contact\" \r\n            autoComplete=\"off\"\r\n            maxLength = \"10\"\r\n            minLength = \"10\"\r\n            onChange={\r\n                e => {\r\n                    this.state.partyContact = e.target.value;\r\n                    if(e.target.value.length === 10){\r\n                      if(this.state.partyContacts.indexOf(e.target.value)>-1){\r\n                        this.state.getNameVillage(e.target.value);\r\n                      }\r\n                    }\r\n                }\r\n            } \r\n            required\r\n        />\r\n\r\n        <br/>\r\n        <br/>\r\n\r\n        <input \r\n            type=\"text\" \r\n            className=\"mb-2\" \r\n            name=\"partyVillage\" \r\n            placeholder=\"Party Village\" \r\n            autoComplete=\"off\"\r\n            maxLength = \"30\"\r\n            minLength = \"5\"\r\n            onChange={\r\n                e => {\r\n                    this.state.partyVillage = e.target.value;\r\n                }\r\n            } \r\n            required\r\n        />\r\n\r\n    </div>    \r\n    <p>{this.state.responseMessage}</p>\r\n    <button type=\"submit\" className=\"btn btn-outline-dark\" style={this.state.buttonStatus} >Save</button>\r\n    </form>  \r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}