{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class MachinePartyRegistration extends React.Component {\n  // Check existence of party name\n  //Form Handler\n  // toggle load status\n  constructor(props) {\n    super(props);\n\n    this.fetchProduct = async () => {\n      try {\n        const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n        const jsonMachineList = await responseMachineList.json();\n        this.state.machineList = jsonMachineList;\n        const responseContactList = await fetch(\"http://127.0.0.1:8000/list-of-partycontacts/\");\n        const jsonContactList = await responseContactList.json();\n        this.state.partyContacts = jsonContactList;\n      } catch {\n        this.toggleLoadStatus();\n      }\n    };\n\n    this.getNameVillage = matchContact => {\n      console.log(matchContact);\n      axios.post(\"http://127.0.0.1:8000/party-through-contact/\", {\n        contact: matchContact\n      }).then(res => {\n        const jsonNameVillage = JSON.parse(res.data);\n        this.setState({\n          partyName: jsonNameVillage.name,\n          partyVillage: jsonNameVillage.village\n        });\n      }).catch(error => {//console.log( error.response.request._response )\n      });\n    };\n\n    this.checkVillage = () => {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n    };\n\n    this.checkParty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {// alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.toggleLoadStatus = async () => {\n      if (this.state.loadingStatus.visibility === \"visible\") {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"hidden\"\n          },\n          loadedStatus: {\n            visibility: \"visible\"\n          }\n        });\n      } else {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"visible\"\n          },\n          loadedStatus: {\n            visibility: \"hidden\"\n          }\n        });\n      }\n    };\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      disabled: true,\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.getNameVillage = this.getNameVillage.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n    this.checkVillage = this.checkVillage.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(InputContactField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyContact = dataFromChild;\n\n        if (dataFromChild.length === 10) {\n          if (this.state.partyContacts.indexOf(dataFromChild) > -1) {\n            this.getNameVillage(dataFromChild);\n          } else this.setState({\n            disabled: !this.state.disabled,\n            partyName: \"\",\n            partyVillage: \"\"\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyName\",\n      placeholder: \"Party Name\",\n      value: this.state.partyName,\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyName = e.target.value;\n        this.checkParty();\n      },\n      required: true,\n      disabled: this.state.disabled ? \"disabled\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyVillage\",\n      placeholder: \"Party Village\",\n      value: this.state.partyVillage,\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyVillage = e.target.value;\n        this.checkVillage();\n      },\n      required: true,\n      disabled: this.state.disabled ? \"disabled\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/registration/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","InputPartyNameField","InputContactField","InputPartyVillageField","MachinePartyRegistration","Component","constructor","props","fetchProduct","responseMachineList","fetch","jsonMachineList","json","state","machineList","responseContactList","jsonContactList","partyContacts","toggleLoadStatus","getNameVillage","matchContact","console","log","post","contact","then","res","jsonNameVillage","JSON","parse","data","setState","partyName","name","partyVillage","village","catch","error","checkVillage","partyExistMessage","responseMessage","buttonStatus","visibility","checkParty","showList","item","index","toLowerCase","partyList","forEach","err","onSubmit","e","partyContact","target","reset","preventDefault","loadingStatus","loadedStatus","disabled","bind","componentDidMount","render","dataFromChild","length","indexOf","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,eAAe,MAAMC,wBAAN,SAAuCL,KAAK,CAACM,SAA7C,CAAuD;AAgDpE;AA0BA;AAsBA;AAuBAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAtHnBC,YAsHmB,GAtHJ,YAAY;AACzB,UAAI;AACF,cAAMC,mBAAmB,GAAG,MAAMC,KAAK,CACrC,6CADqC,CAAvC;AAGA,cAAMC,eAAe,GAAG,MAAMF,mBAAmB,CAACG,IAApB,EAA9B;AACA,aAAKC,KAAL,CAAWC,WAAX,GAAyBH,eAAzB;AAEA,cAAMI,mBAAmB,GAAG,MAAML,KAAK,CACrC,8CADqC,CAAvC;AAGA,cAAMM,eAAe,GAAG,MAAMD,mBAAmB,CAACH,IAApB,EAA9B;AACA,aAAKC,KAAL,CAAWI,aAAX,GAA2BD,eAA3B;AACD,OAZD,CAYE,MAAM;AACN,aAAKE,gBAAL;AACD;AACF,KAsGkB;;AAAA,SApGnBC,cAoGmB,GApGFC,YAAY,IAAI;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAEApB,MAAAA,KAAK,CACFuB,IADH,CACQ,8CADR,EACwD;AACpDC,QAAAA,OAAO,EAAEJ;AAD2C,OADxD,EAIGK,IAJH,CAIQC,GAAG,IAAI;AACX,cAAMC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,IAAf,CAAxB;AAEA,aAAKC,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAEL,eAAe,CAACM,IADf;AAEZC,UAAAA,YAAY,EAAEP,eAAe,CAACQ;AAFlB,SAAd;AAID,OAXH,EAYGC,KAZH,CAYSC,KAAK,IAAI,CACd;AACD,OAdH;AAeD,KAkFkB;;AAAA,SAhFnBC,YAgFmB,GAhFJ,MAAM;AACnB,WAAKP,QAAL,CAAc;AACZQ,QAAAA,iBAAiB,EAAE,EADP;AAEZC,QAAAA,eAAe,EAAE,EAFL;AAGZC,QAAAA,YAAY,EAAE;AACZC,UAAAA,UAAU,EAAE;AADA;AAHF,OAAd;AAOD,KAwEkB;;AAAA,SAtEnBC,UAsEmB,GAtEN,MAAM;AACjB,UAAI;AACF,aAAKZ,QAAL,CAAc;AACZQ,UAAAA,iBAAiB,EAAE,EADP;AAEZC,UAAAA,eAAe,EAAE,EAFL;AAGZC,UAAAA,YAAY,EAAE;AACZC,YAAAA,UAAU,EAAE;AADA;AAHF,SAAd;;AAOA,cAAME,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,cAAI,KAAKjC,KAAL,CAAWmB,SAAX,CAAqBe,WAArB,OAAuCF,IAAI,CAACZ,IAAL,CAAUc,WAAV,EAA3C,EAAoE;AAClE,iBAAKhB,QAAL,CAAc;AACZQ,cAAAA,iBAAiB,EAAE,uCADP;AAEZE,cAAAA,YAAY,EAAE;AACZC,gBAAAA,UAAU,EAAE;AADA;AAFF,aAAd;AAMD,WAPD,MAOO,CACN;AACF,SAVD;;AAYA,aAAK7B,KAAL,CAAWmC,SAAX,CAAqBC,OAArB,CAA6BL,QAA7B;AACD,OArBD,CAqBE,OAAOM,GAAP,EAAY,CAAE;AACjB,KA+CkB;;AAAA,SA5CnBC,QA4CmB,GA5CRC,CAAC,IAAI;AACdpD,MAAAA,KAAK,CACFuB,IADH,CACQ,mDADR,EAC6D;AACzDU,QAAAA,IAAI,EAAE,KAAKpB,KAAL,CAAWmB,SADwC;AAEzDR,QAAAA,OAAO,EAAE,KAAKX,KAAL,CAAWwC,YAFqC;AAGzDlB,QAAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWqB;AAHqC,OAD7D,EAMGT,IANH,CAMQC,GAAG,IAAI;AACX,aAAKb,KAAL,CAAWL,YAAX;AACA,aAAKuB,QAAL,CAAc;AACZS,UAAAA,eAAe,EAAEd,GAAG,CAACI;AADT,SAAd;AAGD,OAXH,EAYGM,KAZH,CAYSC,KAAK,IAAI,CACd;AACD,OAdH;AAgBAe,MAAAA,CAAC,CAACE,MAAF,CAASC,KAAT;AACAH,MAAAA,CAAC,CAACI,cAAF;AACD,KAyBkB;;AAAA,SAtBnBtC,gBAsBmB,GAtBA,YAAY;AAC7B,UAAI,KAAKL,KAAL,CAAW4C,aAAX,CAAyBf,UAAzB,KAAwC,SAA5C,EAAuD;AACrD,cAAM,KAAKX,QAAL,CAAc;AAClB0B,UAAAA,aAAa,EAAE;AACbf,YAAAA,UAAU,EAAE;AADC,WADG;AAIlBgB,UAAAA,YAAY,EAAE;AACZhB,YAAAA,UAAU,EAAE;AADA;AAJI,SAAd,CAAN;AAQD,OATD,MASO;AACL,cAAM,KAAKX,QAAL,CAAc;AAClB0B,UAAAA,aAAa,EAAE;AACbf,YAAAA,UAAU,EAAE;AADC,WADG;AAIlBgB,UAAAA,YAAY,EAAE;AACZhB,YAAAA,UAAU,EAAE;AADA;AAJI,SAAd,CAAN;AAQD;AACF,KAEkB;;AAGjB,SAAK7B,KAAL,GAAa;AACXmB,MAAAA,SAAS,EAAE,EADA;AAEXqB,MAAAA,YAAY,EAAE,EAFH;AAGXnB,MAAAA,YAAY,EAAE,EAHH;AAIXc,MAAAA,SAAS,EAAE,EAJA;AAKXT,MAAAA,iBAAiB,EAAE,EALR;AAMXC,MAAAA,eAAe,EAAE,EANN;AAOXvB,MAAAA,aAAa,EAAE,EAPJ;AAQXwB,MAAAA,YAAY,EAAE;AACZC,QAAAA,UAAU,EAAE;AADA,OARH;AAWXiB,MAAAA,QAAQ,EAAE,IAXC;AAYXF,MAAAA,aAAa,EAAE;AACbf,QAAAA,UAAU,EAAE;AADC,OAZJ;AAeXgB,MAAAA,YAAY,EAAE;AACZhB,QAAAA,UAAU,EAAE;AADA;AAfH,KAAb;AAmBA,SAAKlC,YAAL,GAAoB,KAAKA,YAAL,CAAkBoD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKzC,cAAL,GAAsB,KAAKA,cAAL,CAAoByC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKjB,UAAL,GAAkB,KAAKA,UAAL,CAAgBiB,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKtB,YAAL,GAAoB,KAAKA,YAAL,CAAkBsB,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKT,QAAL,GAAgB,KAAKA,QAAL,CAAcS,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAK1C,gBAAL,GAAwB,KAAKA,gBAAL,CAAsB0C,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKpD,YAAL;AACD;;AAEDqD,EAAAA,iBAAiB,GAAG;AAClB,SAAK3C,gBAAL;AACD;;AAED4C,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,QAAQ,EAAEV,CAAC,IAAI,KAAKD,QAAL,CAAcC,CAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJF,EAKE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,iBAAD;AACE,MAAA,kBAAkB,EAAEW,aAAa,IAAI;AACnC,aAAKlD,KAAL,CAAWwC,YAAX,GAA0BU,aAA1B;;AACA,YAAIA,aAAa,CAACC,MAAd,KAAyB,EAA7B,EAAiC;AAC/B,cAAI,KAAKnD,KAAL,CAAWI,aAAX,CAAyBgD,OAAzB,CAAiCF,aAAjC,IAAkD,CAAC,CAAvD,EAA0D;AACxD,iBAAK5C,cAAL,CAAoB4C,aAApB;AACD,WAFD,MAGE,KAAKhC,QAAL,CAAc;AACZ4B,YAAAA,QAAQ,EAAE,CAAC,KAAK9C,KAAL,CAAW8C,QADV;AAEZ3B,YAAAA,SAAS,EAAE,EAFC;AAGZE,YAAAA,YAAY,EAAE;AAHF,WAAd;AAKH;AACF,OAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBF,EAoBE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,IAAI,EAAC,WAHP;AAIE,MAAA,WAAW,EAAC,YAJd;AAKE,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWmB,SALpB;AAME,MAAA,YAAY,EAAC,KANf;AAOE,MAAA,SAAS,EAAC,IAPZ;AAQE,MAAA,SAAS,EAAC,GARZ;AASE,MAAA,QAAQ,EAAEoB,CAAC,IAAI;AACb,aAAKvC,KAAL,CAAWmB,SAAX,GAAuBoB,CAAC,CAACE,MAAF,CAASY,KAAhC;AACA,aAAKvB,UAAL;AACD,OAZH;AAaE,MAAA,QAAQ,MAbV;AAcE,MAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAW8C,QAAX,GAAsB,UAAtB,GAAmC,EAd/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,EAqCE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,IAAI,EAAC,cAHP;AAIE,MAAA,WAAW,EAAC,eAJd;AAKE,MAAA,KAAK,EAAE,KAAK9C,KAAL,CAAWqB,YALpB;AAME,MAAA,YAAY,EAAC,KANf;AAOE,MAAA,SAAS,EAAC,IAPZ;AAQE,MAAA,SAAS,EAAC,GARZ;AASE,MAAA,QAAQ,EAAEkB,CAAC,IAAI;AACb,aAAKvC,KAAL,CAAWqB,YAAX,GAA0BkB,CAAC,CAACE,MAAF,CAASY,KAAnC;AACA,aAAK5B,YAAL;AACD,OAZH;AAaE,MAAA,QAAQ,MAbV;AAcE,MAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAW8C,QAAX,GAAsB,UAAtB,GAAmC,EAd/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArCF,CALF,EA2DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAK9C,KAAL,CAAW2B,eAAf,CA3DF,EA4DE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,sBAFZ;AAGE,MAAA,KAAK,EAAE,KAAK3B,KAAL,CAAW4B,YAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5DF,CADF;AAsED;;AAjOmE","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nexport default class MachinePartyRegistration extends React.Component {\n  fetchProduct = async () => {\n    try {\n      const responseMachineList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machineparty/\"\n      );\n      const jsonMachineList = await responseMachineList.json();\n      this.state.machineList = jsonMachineList;\n\n      const responseContactList = await fetch(\n        \"http://127.0.0.1:8000/list-of-partycontacts/\"\n      );\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n    } catch {\n      this.toggleLoadStatus();\n    }\n  };\n\n  getNameVillage = matchContact => {\n    console.log(matchContact);\n\n    axios\n      .post(\"http://127.0.0.1:8000/party-through-contact/\", {\n        contact: matchContact\n      })\n      .then(res => {\n        const jsonNameVillage = JSON.parse(res.data);\n\n        this.setState({\n          partyName: jsonNameVillage.name,\n          partyVillage: jsonNameVillage.village\n        });\n      })\n      .catch(error => {\n        //console.log( error.response.request._response )\n      });\n  };\n\n  checkVillage = () => {\n    this.setState({\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      }\n    });\n  };\n  // Check existence of party name\n  checkParty = () => {\n    try {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n      const showList = (item, index) => {\n        if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n          this.setState({\n            partyExistMessage: \"* This party name is already exist!!!\",\n            buttonStatus: {\n              visibility: \"hidden\"\n            }\n          });\n        } else {\n        }\n      };\n\n      this.state.partyList.forEach(showList);\n    } catch (err) {}\n  };\n\n  //Form Handler\n  onSubmit = e => {\n    axios\n      .post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      })\n      .then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      })\n      .catch(error => {\n        // alert(error.response.request._response);\n      });\n\n    e.target.reset();\n    e.preventDefault();\n  };\n\n  // toggle load status\n  toggleLoadStatus = async () => {\n    if (this.state.loadingStatus.visibility === \"visible\") {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"hidden\"\n        },\n        loadedStatus: {\n          visibility: \"visible\"\n        }\n      });\n    } else {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"visible\"\n        },\n        loadedStatus: {\n          visibility: \"hidden\"\n        }\n      });\n    }\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      disabled: true,\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.getNameVillage = this.getNameVillage.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n    this.checkVillage = this.checkVillage.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          <InputContactField\n            callbackFromParent={dataFromChild => {\n              this.state.partyContact = dataFromChild;\n              if (dataFromChild.length === 10) {\n                if (this.state.partyContacts.indexOf(dataFromChild) > -1) {\n                  this.getNameVillage(dataFromChild);\n                } else\n                  this.setState({\n                    disabled: !this.state.disabled,\n                    partyName: \"\",\n                    partyVillage: \"\"\n                  });\n              }\n            }}\n          />\n\n          <br />\n          <br />\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyName\"\n            placeholder=\"Party Name\"\n            value={this.state.partyName}\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyName = e.target.value;\n              this.checkParty();\n            }}\n            required\n            disabled={this.state.disabled ? \"disabled\" : \"\"}\n          />\n\n          <input\n            type=\"text\"\n            className=\"mb-2\"\n            name=\"partyVillage\"\n            placeholder=\"Party Village\"\n            value={this.state.partyVillage}\n            autoComplete=\"off\"\n            maxLength=\"30\"\n            minLength=\"5\"\n            onChange={e => {\n              this.state.partyVillage = e.target.value;\n              this.checkVillage();\n            }}\n            required\n            disabled={this.state.disabled ? \"disabled\" : \"\"}\n          />\n        </div>\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}