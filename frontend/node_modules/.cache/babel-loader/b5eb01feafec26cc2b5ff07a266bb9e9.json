{"ast":null,"code":"var _jsxFileName = \"/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nexport default class MachinePartyRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n        visibility: 'visible'\n      }\n    }; // Fetch party list from server\n\n    this.state.fetchProduct = async () => {\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n      const responseContactList = await fetch(\"http://127.0.0.1:8000/list-of-partycontacts/\");\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n    };\n\n    this.state.fetchProduct(); // Take name and village from contact\n\n    this.state.getNameVillage = matchContact => {\n      axios.post('http://127.0.0.1:8000/party-through-contact/', {\n        contact: matchContact\n      }).then(res => {\n        console.log(\"Name \", res.data);\n        console.log(\"Village\");\n      }).catch(error => {\n        console.log(error.response.request._response);\n      });\n    }; // Check existence of party name \n\n\n    this.state.checkparty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: 'visible'\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: 'hidden'\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.state.onSubmit = e => {\n      axios.post('http://127.0.0.1:8000/machine-party-registration/', {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {\n        alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.state.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyName\",\n      placeholder: \"Party Name\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyName = e.target.value;\n        this.state.checkparty();\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      className: \"mb-2\",\n      name: \"partyContact\",\n      placeholder: \"Party Contact\",\n      autoComplete: \"off\",\n      maxLength: \"10\",\n      minLength: \"10\",\n      onChange: e => {\n        this.state.partyContact = e.target.value;\n\n        if (e.target.value.length === 10) {\n          if (this.state.partyContacts.indexOf(e.target.value) > -1) {\n            this.state.getNameVillage(e.target.value);\n          }\n        }\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"partyVillage\",\n      placeholder: \"Party Village\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"5\",\n      onChange: e => {\n        this.state.partyVillage = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","MachinePartyRegistration","Component","constructor","props","state","partyName","partyContact","partyVillage","partyList","partyExistMessage","responseMessage","partyContacts","buttonStatus","visibility","fetchProduct","responsePartyList","fetch","jsonPartyList","json","responseContactList","jsonContactList","getNameVillage","matchContact","post","contact","then","res","console","log","data","catch","error","response","request","_response","checkparty","setState","showList","item","index","toLowerCase","name","forEach","err","onSubmit","e","village","alert","target","reset","preventDefault","render","value","length","indexOf"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nexport default class MachinePartyRegistration extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      partyContacts: \"\",\n      buttonStatus: {\n          visibility: 'visible'\n      }\n    }\n\n    // Fetch party list from server\n    this.state.fetchProduct = async () =>{\n      const responsePartyList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n      const jsonPartyList = await responsePartyList.json();\n      this.state.partyList = jsonPartyList;\n      const responseContactList = await fetch(\n        \"http://127.0.0.1:8000/list-of-partycontacts/\"\n      );\n      const jsonContactList = await responseContactList.json();\n      this.state.partyContacts = jsonContactList;\n    }\n    \n    \n    this.state.fetchProduct(); \n\n    // Take name and village from contact\n    this.state.getNameVillage = (matchContact) => {\n      axios.post('http://127.0.0.1:8000/party-through-contact/', \n      {\n        contact: matchContact\n      }\n      ).then(res => {\n        console.log(\"Name \",res.data)\n        console.log(\"Village\")\n      }\n      ).catch(error => {\n        console.log( error.response.request._response )\n      });\n    }    \n\n    // Check existence of party name \n    this.state.checkparty = () => {\n      try {\n        this.setState({\n             partyExistMessage :\"\",\n             responseMessage: \"\",\n             buttonStatus: {\n                 visibility: 'visible'           \n             }\n            });\n        const showList = (item, index) => {\n            if (this.state.partyName.toLowerCase() === item.name.toLowerCase()){\n              this.setState({\n                 partyExistMessage :\"* This party name is already exist!!!\",\n                    buttonStatus: {\n                  visibility: 'hidden'                 \n                 }\n              });\n            }\n            else{}\n        };\n        this.state.partyList.forEach(showList);\n      } \n      catch (err) {}\n    }\n\n    this.state.onSubmit =(e) => {\n        axios.post('http://127.0.0.1:8000/machine-party-registration/', \n        {\n          name: this.state.partyName,\n          contact: this.state.partyContact,\n          village: this.state.partyVillage\n        }\n        ).then(res => {\n          this.state.fetchProduct();\n          this.setState({\n            responseMessage: res.data\n          });         \n        }\n        ).catch(error => {\n          alert( error.response.request._response )\n        });\n      e.target.reset();\n      e.preventDefault();\n    };\n  \n  }\n \n  render(){\n    return (\n\t\t<form className=\"form-container form-group\" onSubmit={ e => this.state.onSubmit(e) }>\n         <p className=\"headingViewPart\">Machine Party Registration</p>\n\t\t<div className=\"pt-5\">\n\n        <input \n            type=\"text\" \n            className=\"mb-2\" \n            name=\"partyName\" \n            placeholder=\"Party Name\" \n            autoComplete=\"off\"\n            maxLength = \"30\"\n            minLength = \"5\"\n            onChange={\n                e => {\n                    this.state.partyName = e.target.value;\n                    this.state.checkparty();\n                }\n            } \n            required\n        />\n        \n        <p>{this.state.partyExistMessage}</p>\n        <br/>  \n\n        <input \n            type=\"number\" \n            className=\"mb-2\" \n            name=\"partyContact\" \n            placeholder=\"Party Contact\" \n            autoComplete=\"off\"\n            maxLength = \"10\"\n            minLength = \"10\"\n            onChange={\n                e => {\n                    this.state.partyContact = e.target.value;\n                    if(e.target.value.length === 10){\n                      if(this.state.partyContacts.indexOf(e.target.value)>-1){\n                        this.state.getNameVillage(e.target.value);\n                      }\n                    }\n                }\n            } \n            required\n        />\n\n        <br/>\n        <br/>\n\n        <input \n            type=\"text\" \n            className=\"mb-2\" \n            name=\"partyVillage\" \n            placeholder=\"Party Village\" \n            autoComplete=\"off\"\n            maxLength = \"30\"\n            minLength = \"5\"\n            onChange={\n                e => {\n                    this.state.partyVillage = e.target.value;\n                }\n            } \n            required\n        />\n\n    </div>    \n    <p>{this.state.responseMessage}</p>\n    <button type=\"submit\" className=\"btn btn-outline-dark\" style={this.state.buttonStatus} >Save</button>\n    </form>  \n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}