{"ast":null,"code":"var _jsxFileName = \"/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nexport default function MachineRegistration() {\n  const [machineList, setMachineList] = useState({});\n  const [machineName, userInput] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () => {\n    const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\");\n    const jsonMachineList = await responseMachineList.json();\n    setMachineList(jsonMachineList);\n  };\n\n  fetchProduct();\n  useEffect(() => {\n    checkMachine();\n  }, [machineList]); // below function is used to check typed machine name is already in database or not\n\n  function checkMachine() {\n    try {\n      //errors.firstName.message();\n      setErrorMessage(\"\");\n\n      const showList = (item, index) => {\n        if (machineName === item.name) {\n          setErrorMessage(\"* This machine name is already exist!!!\");\n        } else {}\n      };\n\n      machineList.forEach(showList);\n    } catch (err) {}\n  }\n\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm();\n\n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\" + machineName);\n    axios.post(`http://127.0.0.1:8000/machine-registration/`, {\n      name: machineName\n    }).then(res => {\n      console.log(res);\n      console.log(res.data);\n      setMachineList(res);\n    });\n    e.target.reset();\n  };\n\n  console.log(errors);\n  return React.createElement(\"form\", {\n    className: \"form-container form-group\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"headingViewPart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Machine Registration\"), React.createElement(\"div\", {\n    className: \"pt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"mb-2\",\n    name: \"machine\",\n    placeholder: \"Machine Name\",\n    onChange: e => userInput(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-outline-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Save\"));\n}\n/*\n      <center>\n        <h2>Machine Registration</h2>\n      </center>\n      \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n              type=\"text\"\n              name=\"machineName\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userInput(e.target.value)}\n              placeholder=\"Enter Machine Name\"/>\n\n            <br/>\n            <p>{errorMessage}</p>\n\n          <input type=\"submit\" />\n        </form>\n*/","map":{"version":3,"sources":["/home/cog/Desktop/stawif/registration/frontend/src/components/registration/MachineRegistration.js"],"names":["React","useState","useEffect","axios","useForm","MachineRegistration","machineList","setMachineList","machineName","userInput","errorMessage","setErrorMessage","fetchProduct","responseMachineList","fetch","jsonMachineList","json","checkMachine","showList","item","index","name","forEach","err","register","errors","handleSubmit","reset","onSubmit","data","e","alert","post","then","res","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function MachineRegistration() {\n  const [machineList, setMachineList] = useState({});\n  const [machineName, userInput] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const fetchProduct = async () =>{\n    const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machines/\"); \n    const jsonMachineList = await responseMachineList.json();\n    setMachineList(jsonMachineList);\n  }\n\n  fetchProduct(); \n\n  useEffect(\n    () => {\n      checkMachine();\n    },\n    [machineList]\n  );\n  \n  // below function is used to check typed machine name is already in database or not\n  function checkMachine() {\n    try {\n      //errors.firstName.message();\n      setErrorMessage(\"\");\n      const showList = (item, index) => {\n        if (machineName === item.name) {\n          setErrorMessage(\"* This machine name is already exist!!!\");\n        }\n        else{}\n      };\n      machineList.forEach(showList);\n    } \n    catch (err) {}\n  }\n\n  const { register, errors, handleSubmit, reset } = useForm();\n  const onSubmit = (data, e) => {\n    alert(\"machine registered successfully\"+machineName);\n    axios\n      .post(`http://127.0.0.1:8000/machine-registration/`, {\n        name: machineName\n      })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        setMachineList(res);\n      });\n    e.target.reset();\n  };\n  console.log(errors);\n\n  return (\n\t\t\t\t\t\t\t<form className=\"form-container form-group\" onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t\t\t<p className=\"headingViewPart\">Machine Registration</p>\n\t\t\t\t\t\t\t<div className=\"pt-5\">\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"mb-2\" name=\"machine\" placeholder=\"Machine Name\" onChange={e => userInput(e.target.value)} required/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<br/>\n              \n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-outline-dark\">Save</button>\n\t\t\t\t\t\t\t</form>      \n  );\n}\n\n/*\n      <center>\n        <h2>Machine Registration</h2>\n      </center>\n      \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n              type=\"text\"\n              name=\"machineName\"\n              ref={register({\n                required: true,\n                maxLength: 30,\n                minLength: { value: 5, message: \"Min length is 5\" }\n              })}\n              onChange={e => userInput(e.target.value)}\n              placeholder=\"Enter Machine Name\"/>\n\n            <br/>\n            <p>{errorMessage}</p>\n\n          <input type=\"submit\" />\n        </form>\n*/"]},"metadata":{},"sourceType":"module"}