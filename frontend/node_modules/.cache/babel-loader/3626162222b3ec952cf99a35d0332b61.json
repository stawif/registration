{"ast":null,"code":"var _jsxFileName = \"E:\\\\registration\\\\frontend\\\\src\\\\components\\\\registration\\\\ItemRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputQuantityField from \"../modular/InputQuantityField\";\nimport InputCommonName from \"../modular/InputCommonName\";\nexport default class ItemRegistration extends React.Component {\n  // Fetch item list from server\n  // Check existence of item name\n  //Form Handler\n  // toggle load status\n  constructor(props) {\n    super(props);\n\n    this.fetchProduct = async () => {\n      try {\n        const responseItemList = await fetch(\"http://127.0.0.1:8000/list-of-item/\");\n        const jsonItemList = await responseItemList.json();\n        this.state.itemList = jsonItemList;\n      } catch {\n        this.toggleLoadStatus();\n      }\n    };\n\n    this.checkItem = () => {\n      try {\n        this.setState({\n          itemExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.itemName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              itemExistMessage: \"* This item name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.itemList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/item-registration/\", {\n        name: this.state.itemName,\n        measurement: this.state.itemMeasurement,\n        quantity: this.state.itemQuantity\n      }).then(res => {\n        this.state.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {// alert(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.toggleLoadStatus = async () => {\n      if (this.state.loadingStatus.visibility === \"visible\") {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"hidden\"\n          },\n          loadedStatus: {\n            visibility: \"visible\"\n          }\n        });\n      } else {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"visible\"\n          },\n          loadedStatus: {\n            visibility: \"hidden\"\n          }\n        });\n      }\n    };\n\n    this.state = {\n      itemName: \"\",\n      itemMeasurement: \"\",\n      itemQuantity: 0,\n      itemList: {},\n      itemExistMessage: \"\",\n      responseMessage: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkItem = this.checkItem.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Item Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(InputCommonName, {\n      minLength: \"2\",\n      placeholderParent: \"Item Name\",\n      callbackFromParent: dataFromChild => {\n        this.state.itemName = dataFromChild;\n      },\n      checkFromParent: this.checkItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, this.state.itemExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"mb-2\",\n      name: \"itemMeasurement\",\n      placeholder: \"Item Measurement\",\n      autoComplete: \"off\",\n      maxLength: \"30\",\n      minLength: \"1\",\n      onChange: e => {\n        this.state.itemMeasurement = e.target.value;\n      },\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(InputQuantityField, {\n      placeholder: \"Quantity\",\n      callbackFromParent: dataFromChild => {\n        this.state.itemQuantity = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["E:/registration/frontend/src/components/registration/ItemRegistration.js"],"names":["React","axios","InputQuantityField","InputCommonName","ItemRegistration","Component","constructor","props","fetchProduct","responseItemList","fetch","jsonItemList","json","state","itemList","toggleLoadStatus","checkItem","setState","itemExistMessage","responseMessage","buttonStatus","visibility","showList","item","index","itemName","toLowerCase","name","forEach","err","onSubmit","e","post","measurement","itemMeasurement","quantity","itemQuantity","then","res","data","catch","error","target","reset","preventDefault","loadingStatus","loadedStatus","bind","componentDidMount","render","dataFromChild","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport InputQuantityField from \"../modular/InputQuantityField\";\r\nimport InputCommonName from \"../modular/InputCommonName\";\r\n\r\nexport default class ItemRegistration extends React.Component {\r\n  // Fetch item list from server\r\n  fetchProduct = async () => {\r\n    try {\r\n      const responseItemList = await fetch(\r\n        \"http://127.0.0.1:8000/list-of-item/\"\r\n      );\r\n      const jsonItemList = await responseItemList.json();\r\n      this.state.itemList = jsonItemList;\r\n    } catch {\r\n      this.toggleLoadStatus();\r\n    }\r\n  };\r\n\r\n  // Check existence of item name\r\n  checkItem = () => {\r\n    try {\r\n      this.setState({\r\n        itemExistMessage: \"\",\r\n        responseMessage: \"\",\r\n        buttonStatus: {\r\n          visibility: \"visible\"\r\n        }\r\n      });\r\n      const showList = (item, index) => {\r\n        if (this.state.itemName.toLowerCase() === item.name.toLowerCase()) {\r\n          this.setState({\r\n            itemExistMessage: \"* This item name is already exist!!!\",\r\n            buttonStatus: {\r\n              visibility: \"hidden\"\r\n            }\r\n          });\r\n        } else {\r\n        }\r\n      };\r\n      this.state.itemList.forEach(showList);\r\n    } catch (err) {}\r\n  };\r\n\r\n  //Form Handler\r\n  onSubmit = e => {\r\n    axios\r\n      .post(\"http://127.0.0.1:8000/item-registration/\", {\r\n        name: this.state.itemName,\r\n        measurement: this.state.itemMeasurement,\r\n        quantity: this.state.itemQuantity\r\n      })\r\n      .then(res => {\r\n        this.state.fetchProduct();\r\n        this.setState({\r\n          responseMessage: res.data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        // alert(error.response.request._response);\r\n      });\r\n    e.target.reset();\r\n    e.preventDefault();\r\n  };\r\n\r\n  // toggle load status\r\n  toggleLoadStatus = async () => {\r\n    if (this.state.loadingStatus.visibility === \"visible\") {\r\n      await this.setState({\r\n        loadingStatus: {\r\n          visibility: \"hidden\"\r\n        },\r\n        loadedStatus: {\r\n          visibility: \"visible\"\r\n        }\r\n      });\r\n    } else {\r\n      await this.setState({\r\n        loadingStatus: {\r\n          visibility: \"visible\"\r\n        },\r\n        loadedStatus: {\r\n          visibility: \"hidden\"\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      itemName: \"\",\r\n      itemMeasurement: \"\",\r\n      itemQuantity: 0,\r\n      itemList: {},\r\n      itemExistMessage: \"\",\r\n      responseMessage: \"\",\r\n      buttonStatus: {\r\n        visibility: \"visible\"\r\n      },\r\n      loadingStatus: {\r\n        visibility: \"visible\"\r\n      },\r\n      loadedStatus: {\r\n        visibility: \"hidden\"\r\n      }\r\n    };\r\n\r\n    this.fetchProduct = this.fetchProduct.bind(this);\r\n    this.checkItem = this.checkItem.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\r\n    this.fetchProduct();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.toggleLoadStatus();\r\n  }\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"form-container form-group\"\r\n        onSubmit={e => this.onSubmit(e)}\r\n      >\r\n        <p className=\"headingViewPart\">Item Registration</p>\r\n        <div className=\"pt-5\">\r\n          <InputCommonName\r\n            minLength={\"2\"}\r\n            placeholderParent={\"Item Name\"}\r\n            callbackFromParent={dataFromChild => {\r\n              this.state.itemName = dataFromChild;\r\n            }}\r\n            checkFromParent={this.checkItem}\r\n          />\r\n\r\n          <p>{this.state.itemExistMessage}</p>\r\n          <br />\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"mb-2\"\r\n            name=\"itemMeasurement\"\r\n            placeholder=\"Item Measurement\"\r\n            autoComplete=\"off\"\r\n            maxLength=\"30\"\r\n            minLength=\"1\"\r\n            onChange={e => {\r\n              this.state.itemMeasurement = e.target.value;\r\n            }}\r\n            required\r\n          />\r\n\r\n          <br />\r\n          <br />\r\n\r\n          <InputQuantityField\r\n            placeholder={\"Quantity\"}\r\n            callbackFromParent={dataFromChild => {\r\n              this.state.itemQuantity = dataFromChild;\r\n            }}\r\n          />\r\n\r\n          <hr />\r\n        </div>\r\n        <p>{this.state.responseMessage}</p>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-outline-dark\"\r\n          style={this.state.buttonStatus}\r\n        >\r\n          Save\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}